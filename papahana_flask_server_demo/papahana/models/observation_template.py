# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from papahana.models.base_model_ import Model
from papahana.models.observation_metadata import ObservationMetadata  # noqa: F401,E501
from papahana.models.template_id_schema import TemplateIdSchema  # noqa: F401,E501
from papahana import util


class ObservationTemplate(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, metadata: List[ObservationMetadata]=None, template_id: TemplateIdSchema=None):  # noqa: E501
        """ObservationTemplate - a model defined in Swagger

        :param metadata: The metadata of this ObservationTemplate.  # noqa: E501
        :type metadata: List[ObservationMetadata]
        :param template_id: The template_id of this ObservationTemplate.  # noqa: E501
        :type template_id: TemplateIdSchema
        """
        self.swagger_types = {
            'metadata': List[ObservationMetadata],
            'template_id': TemplateIdSchema
        }

        self.attribute_map = {
            'metadata': 'metadata',
            'template_id': 'template_id'
        }
        self._metadata = metadata
        self._template_id = template_id

    @classmethod
    def from_dict(cls, dikt) -> 'ObservationTemplate':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ObservationTemplate of this ObservationTemplate.  # noqa: E501
        :rtype: ObservationTemplate
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metadata(self) -> List[ObservationMetadata]:
        """Gets the metadata of this ObservationTemplate.


        :return: The metadata of this ObservationTemplate.
        :rtype: List[ObservationMetadata]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: List[ObservationMetadata]):
        """Sets the metadata of this ObservationTemplate.


        :param metadata: The metadata of this ObservationTemplate.
        :type metadata: List[ObservationMetadata]
        """

        self._metadata = metadata

    @property
    def template_id(self) -> TemplateIdSchema:
        """Gets the template_id of this ObservationTemplate.


        :return: The template_id of this ObservationTemplate.
        :rtype: TemplateIdSchema
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id: TemplateIdSchema):
        """Sets the template_id of this ObservationTemplate.


        :param template_id: The template_id of this ObservationTemplate.
        :type template_id: TemplateIdSchema
        """

        self._template_id = template_id

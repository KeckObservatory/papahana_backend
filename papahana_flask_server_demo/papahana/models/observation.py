# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from papahana.models.base_model_ import Model
from papahana import util


class Observation(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, instrument: str=None, exposure_sequences: List[str]=None, associations: List[str]=None):  # noqa: E501
        """Observation - a model defined in Swagger

        :param instrument: The instrument of this Observation.  # noqa: E501
        :type instrument: str
        :param exposure_sequences: The exposure_sequences of this Observation.  # noqa: E501
        :type exposure_sequences: List[str]
        :param associations: The associations of this Observation.  # noqa: E501
        :type associations: List[str]
        """
        self.swagger_types = {
            'instrument': str,
            'exposure_sequences': List[str],
            'associations': List[str]
        }

        self.attribute_map = {
            'instrument': 'instrument',
            'exposure_sequences': 'exposure_sequences',
            'associations': 'associations'
        }
        self._instrument = instrument
        self._exposure_sequences = exposure_sequences
        self._associations = associations

    @classmethod
    def from_dict(cls, dikt) -> 'Observation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Observation of this Observation.  # noqa: E501
        :rtype: Observation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def instrument(self) -> str:
        """Gets the instrument of this Observation.


        :return: The instrument of this Observation.
        :rtype: str
        """
        return self._instrument

    @instrument.setter
    def instrument(self, instrument: str):
        """Sets the instrument of this Observation.


        :param instrument: The instrument of this Observation.
        :type instrument: str
        """
        if instrument is None:
            raise ValueError("Invalid value for `instrument`, must not be `None`")  # noqa: E501

        self._instrument = instrument

    @property
    def exposure_sequences(self) -> List[str]:
        """Gets the exposure_sequences of this Observation.


        :return: The exposure_sequences of this Observation.
        :rtype: List[str]
        """
        return self._exposure_sequences

    @exposure_sequences.setter
    def exposure_sequences(self, exposure_sequences: List[str]):
        """Sets the exposure_sequences of this Observation.


        :param exposure_sequences: The exposure_sequences of this Observation.
        :type exposure_sequences: List[str]
        """
        if exposure_sequences is None:
            raise ValueError("Invalid value for `exposure_sequences`, must not be `None`")  # noqa: E501

        self._exposure_sequences = exposure_sequences

    @property
    def associations(self) -> List[str]:
        """Gets the associations of this Observation.


        :return: The associations of this Observation.
        :rtype: List[str]
        """
        return self._associations

    @associations.setter
    def associations(self, associations: List[str]):
        """Sets the associations of this Observation.


        :param associations: The associations of this Observation.
        :type associations: List[str]
        """
        if associations is None:
            raise ValueError("Invalid value for `associations`, must not be `None`")  # noqa: E501

        self._associations = associations

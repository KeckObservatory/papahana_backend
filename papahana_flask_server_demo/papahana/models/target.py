# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from papahana.models.base_model_ import Model
from papahana.models.coordinate_schema import CoordinateSchema  # noqa: F401,E501
from papahana.models.magnitude import Magnitude  # noqa: F401,E501
from papahana import util


class Target(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, ra: CoordinateSchema=None, dec: CoordinateSchema=None, equinox: str='J2000', frame: str='Fk5', pa: float=0.0, pm_ra: float=0.0, pm_dec: float=0.0, epoch: float=2000.0, obstime: float=None, magnitude: Magnitude=None, dra: float=0.0, ddec: float=0.0, comment: str=None):  # noqa: E501
        """Target - a model defined in Swagger

        :param name: The name of this Target.  # noqa: E501
        :type name: str
        :param ra: The ra of this Target.  # noqa: E501
        :type ra: CoordinateSchema
        :param dec: The dec of this Target.  # noqa: E501
        :type dec: CoordinateSchema
        :param equinox: The equinox of this Target.  # noqa: E501
        :type equinox: str
        :param frame: The frame of this Target.  # noqa: E501
        :type frame: str
        :param pa: The pa of this Target.  # noqa: E501
        :type pa: float
        :param pm_ra: The pm_ra of this Target.  # noqa: E501
        :type pm_ra: float
        :param pm_dec: The pm_dec of this Target.  # noqa: E501
        :type pm_dec: float
        :param epoch: The epoch of this Target.  # noqa: E501
        :type epoch: float
        :param obstime: The obstime of this Target.  # noqa: E501
        :type obstime: float
        :param magnitude: The magnitude of this Target.  # noqa: E501
        :type magnitude: Magnitude
        :param dra: The dra of this Target.  # noqa: E501
        :type dra: float
        :param ddec: The ddec of this Target.  # noqa: E501
        :type ddec: float
        :param comment: The comment of this Target.  # noqa: E501
        :type comment: str
        """
        self.swagger_types = {
            'name': str,
            'ra': CoordinateSchema,
            'dec': CoordinateSchema,
            'equinox': str,
            'frame': str,
            'pa': float,
            'pm_ra': float,
            'pm_dec': float,
            'epoch': float,
            'obstime': float,
            'magnitude': Magnitude,
            'dra': float,
            'ddec': float,
            'comment': str
        }

        self.attribute_map = {
            'name': 'name',
            'ra': 'ra',
            'dec': 'dec',
            'equinox': 'equinox',
            'frame': 'frame',
            'pa': 'PA',
            'pm_ra': 'pm_ra',
            'pm_dec': 'pm_dec',
            'epoch': 'epoch',
            'obstime': 'obstime',
            'magnitude': 'magnitude',
            'dra': 'dra',
            'ddec': 'ddec',
            'comment': 'comment'
        }
        self._name = name
        self._ra = ra
        self._dec = dec
        self._equinox = equinox
        self._frame = frame
        self._pa = pa
        self._pm_ra = pm_ra
        self._pm_dec = pm_dec
        self._epoch = epoch
        self._obstime = obstime
        self._magnitude = magnitude
        self._dra = dra
        self._ddec = ddec
        self._comment = comment

    @classmethod
    def from_dict(cls, dikt) -> 'Target':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Target of this Target.  # noqa: E501
        :rtype: Target
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Target.


        :return: The name of this Target.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Target.


        :param name: The name of this Target.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def ra(self) -> CoordinateSchema:
        """Gets the ra of this Target.


        :return: The ra of this Target.
        :rtype: CoordinateSchema
        """
        return self._ra

    @ra.setter
    def ra(self, ra: CoordinateSchema):
        """Sets the ra of this Target.


        :param ra: The ra of this Target.
        :type ra: CoordinateSchema
        """
        if ra is None:
            raise ValueError("Invalid value for `ra`, must not be `None`")  # noqa: E501

        self._ra = ra

    @property
    def dec(self) -> CoordinateSchema:
        """Gets the dec of this Target.


        :return: The dec of this Target.
        :rtype: CoordinateSchema
        """
        return self._dec

    @dec.setter
    def dec(self, dec: CoordinateSchema):
        """Sets the dec of this Target.


        :param dec: The dec of this Target.
        :type dec: CoordinateSchema
        """
        if dec is None:
            raise ValueError("Invalid value for `dec`, must not be `None`")  # noqa: E501

        self._dec = dec

    @property
    def equinox(self) -> str:
        """Gets the equinox of this Target.


        :return: The equinox of this Target.
        :rtype: str
        """
        return self._equinox

    @equinox.setter
    def equinox(self, equinox: str):
        """Sets the equinox of this Target.


        :param equinox: The equinox of this Target.
        :type equinox: str
        """

        self._equinox = equinox

    @property
    def frame(self) -> str:
        """Gets the frame of this Target.


        :return: The frame of this Target.
        :rtype: str
        """
        return self._frame

    @frame.setter
    def frame(self, frame: str):
        """Sets the frame of this Target.


        :param frame: The frame of this Target.
        :type frame: str
        """

        self._frame = frame

    @property
    def pa(self) -> float:
        """Gets the pa of this Target.


        :return: The pa of this Target.
        :rtype: float
        """
        return self._pa

    @pa.setter
    def pa(self, pa: float):
        """Sets the pa of this Target.


        :param pa: The pa of this Target.
        :type pa: float
        """

        self._pa = pa

    @property
    def pm_ra(self) -> float:
        """Gets the pm_ra of this Target.


        :return: The pm_ra of this Target.
        :rtype: float
        """
        return self._pm_ra

    @pm_ra.setter
    def pm_ra(self, pm_ra: float):
        """Sets the pm_ra of this Target.


        :param pm_ra: The pm_ra of this Target.
        :type pm_ra: float
        """

        self._pm_ra = pm_ra

    @property
    def pm_dec(self) -> float:
        """Gets the pm_dec of this Target.


        :return: The pm_dec of this Target.
        :rtype: float
        """
        return self._pm_dec

    @pm_dec.setter
    def pm_dec(self, pm_dec: float):
        """Sets the pm_dec of this Target.


        :param pm_dec: The pm_dec of this Target.
        :type pm_dec: float
        """

        self._pm_dec = pm_dec

    @property
    def epoch(self) -> float:
        """Gets the epoch of this Target.


        :return: The epoch of this Target.
        :rtype: float
        """
        return self._epoch

    @epoch.setter
    def epoch(self, epoch: float):
        """Sets the epoch of this Target.


        :param epoch: The epoch of this Target.
        :type epoch: float
        """

        self._epoch = epoch

    @property
    def obstime(self) -> float:
        """Gets the obstime of this Target.


        :return: The obstime of this Target.
        :rtype: float
        """
        return self._obstime

    @obstime.setter
    def obstime(self, obstime: float):
        """Sets the obstime of this Target.


        :param obstime: The obstime of this Target.
        :type obstime: float
        """

        self._obstime = obstime

    @property
    def magnitude(self) -> Magnitude:
        """Gets the magnitude of this Target.


        :return: The magnitude of this Target.
        :rtype: Magnitude
        """
        return self._magnitude

    @magnitude.setter
    def magnitude(self, magnitude: Magnitude):
        """Sets the magnitude of this Target.


        :param magnitude: The magnitude of this Target.
        :type magnitude: Magnitude
        """
        if magnitude is None:
            raise ValueError("Invalid value for `magnitude`, must not be `None`")  # noqa: E501

        self._magnitude = magnitude

    @property
    def dra(self) -> float:
        """Gets the dra of this Target.


        :return: The dra of this Target.
        :rtype: float
        """
        return self._dra

    @dra.setter
    def dra(self, dra: float):
        """Sets the dra of this Target.


        :param dra: The dra of this Target.
        :type dra: float
        """

        self._dra = dra

    @property
    def ddec(self) -> float:
        """Gets the ddec of this Target.


        :return: The ddec of this Target.
        :rtype: float
        """
        return self._ddec

    @ddec.setter
    def ddec(self, ddec: float):
        """Sets the ddec of this Target.


        :param ddec: The ddec of this Target.
        :type ddec: float
        """

        self._ddec = ddec

    @property
    def comment(self) -> str:
        """Gets the comment of this Target.


        :return: The comment of this Target.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment: str):
        """Sets the comment of this Target.


        :param comment: The comment of this Target.
        :type comment: str
        """

        self._comment = comment

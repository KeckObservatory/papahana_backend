# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from papahana.models.base_model_ import Model
from papahana.models.acq_metadata import AcqMetadata  # noqa: F401,E501
from papahana.models.acq_properties import AcqProperties  # noqa: F401,E501
from papahana import util


class Acquisition(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, metadata: List[AcqMetadata]=None, properties: List[AcqProperties]=None):  # noqa: E501
        """Acquisition - a model defined in Swagger

        :param metadata: The metadata of this Acquisition.  # noqa: E501
        :type metadata: List[AcqMetadata]
        :param properties: The properties of this Acquisition.  # noqa: E501
        :type properties: List[AcqProperties]
        """
        self.swagger_types = {
            'metadata': List[AcqMetadata],
            'properties': List[AcqProperties]
        }

        self.attribute_map = {
            'metadata': 'metadata',
            'properties': 'properties'
        }
        self._metadata = metadata
        self._properties = properties

    @classmethod
    def from_dict(cls, dikt) -> 'Acquisition':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Acquisition of this Acquisition.  # noqa: E501
        :rtype: Acquisition
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metadata(self) -> List[AcqMetadata]:
        """Gets the metadata of this Acquisition.


        :return: The metadata of this Acquisition.
        :rtype: List[AcqMetadata]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: List[AcqMetadata]):
        """Sets the metadata of this Acquisition.


        :param metadata: The metadata of this Acquisition.
        :type metadata: List[AcqMetadata]
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")  # noqa: E501

        self._metadata = metadata

    @property
    def properties(self) -> List[AcqProperties]:
        """Gets the properties of this Acquisition.


        :return: The properties of this Acquisition.
        :rtype: List[AcqProperties]
        """
        return self._properties

    @properties.setter
    def properties(self, properties: List[AcqProperties]):
        """Sets the properties of this Acquisition.


        :param properties: The properties of this Acquisition.
        :type properties: List[AcqProperties]
        """

        self._properties = properties

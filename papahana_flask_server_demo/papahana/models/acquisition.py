# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from papahana.models.base_model_ import Model
from papahana import util


class Acquisition(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, acquisition: str=None, instrument: str=None, acquisition_method: str=None, guider_selection: str=None, ao_modes: List[str]=None, associations: List[str]=None, offset_stars: List[str]=None, slitmasks: List[str]=None, position_angles: List[str]=None):  # noqa: E501
        """Acquisition - a model defined in Swagger

        :param acquisition: The acquisition of this Acquisition.  # noqa: E501
        :type acquisition: str
        :param instrument: The instrument of this Acquisition.  # noqa: E501
        :type instrument: str
        :param acquisition_method: The acquisition_method of this Acquisition.  # noqa: E501
        :type acquisition_method: str
        :param guider_selection: The guider_selection of this Acquisition.  # noqa: E501
        :type guider_selection: str
        :param ao_modes: The ao_modes of this Acquisition.  # noqa: E501
        :type ao_modes: List[str]
        :param associations: The associations of this Acquisition.  # noqa: E501
        :type associations: List[str]
        :param offset_stars: The offset_stars of this Acquisition.  # noqa: E501
        :type offset_stars: List[str]
        :param slitmasks: The slitmasks of this Acquisition.  # noqa: E501
        :type slitmasks: List[str]
        :param position_angles: The position_angles of this Acquisition.  # noqa: E501
        :type position_angles: List[str]
        """
        self.swagger_types = {
            'acquisition': str,
            'instrument': str,
            'acquisition_method': str,
            'guider_selection': str,
            'ao_modes': List[str],
            'associations': List[str],
            'offset_stars': List[str],
            'slitmasks': List[str],
            'position_angles': List[str]
        }

        self.attribute_map = {
            'acquisition': 'acquisition',
            'instrument': 'instrument',
            'acquisition_method': 'acquisition_method',
            'guider_selection': 'guider_selection',
            'ao_modes': 'ao_modes',
            'associations': 'associations',
            'offset_stars': 'offset_stars',
            'slitmasks': 'slitmasks',
            'position_angles': 'position_angles'
        }
        self._acquisition = acquisition
        self._instrument = instrument
        self._acquisition_method = acquisition_method
        self._guider_selection = guider_selection
        self._ao_modes = ao_modes
        self._associations = associations
        self._offset_stars = offset_stars
        self._slitmasks = slitmasks
        self._position_angles = position_angles

    @classmethod
    def from_dict(cls, dikt) -> 'Acquisition':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Acquisition of this Acquisition.  # noqa: E501
        :rtype: Acquisition
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acquisition(self) -> str:
        """Gets the acquisition of this Acquisition.


        :return: The acquisition of this Acquisition.
        :rtype: str
        """
        return self._acquisition

    @acquisition.setter
    def acquisition(self, acquisition: str):
        """Sets the acquisition of this Acquisition.


        :param acquisition: The acquisition of this Acquisition.
        :type acquisition: str
        """

        self._acquisition = acquisition

    @property
    def instrument(self) -> str:
        """Gets the instrument of this Acquisition.


        :return: The instrument of this Acquisition.
        :rtype: str
        """
        return self._instrument

    @instrument.setter
    def instrument(self, instrument: str):
        """Sets the instrument of this Acquisition.


        :param instrument: The instrument of this Acquisition.
        :type instrument: str
        """
        if instrument is None:
            raise ValueError("Invalid value for `instrument`, must not be `None`")  # noqa: E501

        self._instrument = instrument

    @property
    def acquisition_method(self) -> str:
        """Gets the acquisition_method of this Acquisition.


        :return: The acquisition_method of this Acquisition.
        :rtype: str
        """
        return self._acquisition_method

    @acquisition_method.setter
    def acquisition_method(self, acquisition_method: str):
        """Sets the acquisition_method of this Acquisition.


        :param acquisition_method: The acquisition_method of this Acquisition.
        :type acquisition_method: str
        """

        self._acquisition_method = acquisition_method

    @property
    def guider_selection(self) -> str:
        """Gets the guider_selection of this Acquisition.


        :return: The guider_selection of this Acquisition.
        :rtype: str
        """
        return self._guider_selection

    @guider_selection.setter
    def guider_selection(self, guider_selection: str):
        """Sets the guider_selection of this Acquisition.


        :param guider_selection: The guider_selection of this Acquisition.
        :type guider_selection: str
        """

        self._guider_selection = guider_selection

    @property
    def ao_modes(self) -> List[str]:
        """Gets the ao_modes of this Acquisition.


        :return: The ao_modes of this Acquisition.
        :rtype: List[str]
        """
        return self._ao_modes

    @ao_modes.setter
    def ao_modes(self, ao_modes: List[str]):
        """Sets the ao_modes of this Acquisition.


        :param ao_modes: The ao_modes of this Acquisition.
        :type ao_modes: List[str]
        """

        self._ao_modes = ao_modes

    @property
    def associations(self) -> List[str]:
        """Gets the associations of this Acquisition.


        :return: The associations of this Acquisition.
        :rtype: List[str]
        """
        return self._associations

    @associations.setter
    def associations(self, associations: List[str]):
        """Sets the associations of this Acquisition.


        :param associations: The associations of this Acquisition.
        :type associations: List[str]
        """

        self._associations = associations

    @property
    def offset_stars(self) -> List[str]:
        """Gets the offset_stars of this Acquisition.


        :return: The offset_stars of this Acquisition.
        :rtype: List[str]
        """
        return self._offset_stars

    @offset_stars.setter
    def offset_stars(self, offset_stars: List[str]):
        """Sets the offset_stars of this Acquisition.


        :param offset_stars: The offset_stars of this Acquisition.
        :type offset_stars: List[str]
        """

        self._offset_stars = offset_stars

    @property
    def slitmasks(self) -> List[str]:
        """Gets the slitmasks of this Acquisition.


        :return: The slitmasks of this Acquisition.
        :rtype: List[str]
        """
        return self._slitmasks

    @slitmasks.setter
    def slitmasks(self, slitmasks: List[str]):
        """Sets the slitmasks of this Acquisition.


        :param slitmasks: The slitmasks of this Acquisition.
        :type slitmasks: List[str]
        """

        self._slitmasks = slitmasks

    @property
    def position_angles(self) -> List[str]:
        """Gets the position_angles of this Acquisition.


        :return: The position_angles of this Acquisition.
        :rtype: List[str]
        """
        return self._position_angles

    @position_angles.setter
    def position_angles(self, position_angles: List[str]):
        """Sets the position_angles of this Acquisition.


        :param position_angles: The position_angles of this Acquisition.
        :type position_angles: List[str]
        """

        self._position_angles = position_angles

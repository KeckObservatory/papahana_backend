# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from papahana.models.base_model_ import Model
from papahana.models.instrument_enum import InstrumentEnum  # noqa: F401,E501
from papahana.models.sem_id_schema import SemIdSchema  # noqa: F401,E501
import re  # noqa: F401,E501
from papahana import util


class ObsBlockMetadata(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, version: float=None, ob_type: str=None, priority: float=None, pi_id: int=None, sem_id: SemIdSchema=None, instrument: InstrumentEnum=None, comment: str=None):  # noqa: E501
        """ObsBlockMetadata - a model defined in Swagger

        :param name: The name of this ObsBlockMetadata.  # noqa: E501
        :type name: str
        :param version: The version of this ObsBlockMetadata.  # noqa: E501
        :type version: float
        :param ob_type: The ob_type of this ObsBlockMetadata.  # noqa: E501
        :type ob_type: str
        :param priority: The priority of this ObsBlockMetadata.  # noqa: E501
        :type priority: float
        :param pi_id: The pi_id of this ObsBlockMetadata.  # noqa: E501
        :type pi_id: int
        :param sem_id: The sem_id of this ObsBlockMetadata.  # noqa: E501
        :type sem_id: SemIdSchema
        :param instrument: The instrument of this ObsBlockMetadata.  # noqa: E501
        :type instrument: InstrumentEnum
        :param comment: The comment of this ObsBlockMetadata.  # noqa: E501
        :type comment: str
        """
        self.swagger_types = {
            'name': str,
            'version': float,
            'ob_type': str,
            'priority': float,
            'pi_id': int,
            'sem_id': SemIdSchema,
            'instrument': InstrumentEnum,
            'comment': str
        }

        self.attribute_map = {
            'name': 'name',
            'version': 'version',
            'ob_type': 'ob_type',
            'priority': 'priority',
            'pi_id': 'pi_id',
            'sem_id': 'sem_id',
            'instrument': 'instrument',
            'comment': 'comment'
        }
        self._name = name
        self._version = version
        self._ob_type = ob_type
        self._priority = priority
        self._pi_id = pi_id
        self._sem_id = sem_id
        self._instrument = instrument
        self._comment = comment

    @classmethod
    def from_dict(cls, dikt) -> 'ObsBlockMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ObsBlockMetadata of this ObsBlockMetadata.  # noqa: E501
        :rtype: ObsBlockMetadata
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this ObsBlockMetadata.


        :return: The name of this ObsBlockMetadata.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ObsBlockMetadata.


        :param name: The name of this ObsBlockMetadata.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def version(self) -> float:
        """Gets the version of this ObsBlockMetadata.


        :return: The version of this ObsBlockMetadata.
        :rtype: float
        """
        return self._version

    @version.setter
    def version(self, version: float):
        """Sets the version of this ObsBlockMetadata.


        :param version: The version of this ObsBlockMetadata.
        :type version: float
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def ob_type(self) -> str:
        """Gets the ob_type of this ObsBlockMetadata.


        :return: The ob_type of this ObsBlockMetadata.
        :rtype: str
        """
        return self._ob_type

    @ob_type.setter
    def ob_type(self, ob_type: str):
        """Sets the ob_type of this ObsBlockMetadata.


        :param ob_type: The ob_type of this ObsBlockMetadata.
        :type ob_type: str
        """
        allowed_values = ["science", "calibration", "engineering"]  # noqa: E501
        if ob_type not in allowed_values:
            raise ValueError(
                "Invalid value for `ob_type` ({0}), must be one of {1}"
                .format(ob_type, allowed_values)
            )

        self._ob_type = ob_type

    @property
    def priority(self) -> float:
        """Gets the priority of this ObsBlockMetadata.


        :return: The priority of this ObsBlockMetadata.
        :rtype: float
        """
        return self._priority

    @priority.setter
    def priority(self, priority: float):
        """Sets the priority of this ObsBlockMetadata.


        :param priority: The priority of this ObsBlockMetadata.
        :type priority: float
        """

        self._priority = priority

    @property
    def pi_id(self) -> int:
        """Gets the pi_id of this ObsBlockMetadata.


        :return: The pi_id of this ObsBlockMetadata.
        :rtype: int
        """
        return self._pi_id

    @pi_id.setter
    def pi_id(self, pi_id: int):
        """Sets the pi_id of this ObsBlockMetadata.


        :param pi_id: The pi_id of this ObsBlockMetadata.
        :type pi_id: int
        """
        if pi_id is None:
            raise ValueError("Invalid value for `pi_id`, must not be `None`")  # noqa: E501

        self._pi_id = pi_id

    @property
    def sem_id(self) -> SemIdSchema:
        """Gets the sem_id of this ObsBlockMetadata.


        :return: The sem_id of this ObsBlockMetadata.
        :rtype: SemIdSchema
        """
        return self._sem_id

    @sem_id.setter
    def sem_id(self, sem_id: SemIdSchema):
        """Sets the sem_id of this ObsBlockMetadata.


        :param sem_id: The sem_id of this ObsBlockMetadata.
        :type sem_id: SemIdSchema
        """
        if sem_id is None:
            raise ValueError("Invalid value for `sem_id`, must not be `None`")  # noqa: E501

        self._sem_id = sem_id

    @property
    def instrument(self) -> InstrumentEnum:
        """Gets the instrument of this ObsBlockMetadata.


        :return: The instrument of this ObsBlockMetadata.
        :rtype: InstrumentEnum
        """
        return self._instrument

    @instrument.setter
    def instrument(self, instrument: InstrumentEnum):
        """Sets the instrument of this ObsBlockMetadata.


        :param instrument: The instrument of this ObsBlockMetadata.
        :type instrument: InstrumentEnum
        """
        if instrument is None:
            raise ValueError("Invalid value for `instrument`, must not be `None`")  # noqa: E501

        self._instrument = instrument

    @property
    def comment(self) -> str:
        """Gets the comment of this ObsBlockMetadata.


        :return: The comment of this ObsBlockMetadata.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment: str):
        """Sets the comment of this ObsBlockMetadata.


        :param comment: The comment of this ObsBlockMetadata.
        :type comment: str
        """

        self._comment = comment

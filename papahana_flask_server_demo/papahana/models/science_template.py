# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from papahana.models.base_model_ import Model
from papahana.models.observation_metadata import ObservationMetadata  # noqa: F401,E501
from papahana.models.science_parameters import ScienceParameters  # noqa: F401,E501
from papahana.models.template_id_schema import TemplateIdSchema  # noqa: F401,E501
from papahana import util


class ScienceTemplate(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, metadata: List[ObservationMetadata]=None, parameters: List[ScienceParameters]=None, template_index: TemplateIdSchema=None):  # noqa: E501
        """ScienceTemplate - a model defined in Swagger

        :param metadata: The metadata of this ScienceTemplate.  # noqa: E501
        :type metadata: List[ObservationMetadata]
        :param parameters: The parameters of this ScienceTemplate.  # noqa: E501
        :type parameters: List[ScienceParameters]
        :param template_index: The template_index of this ScienceTemplate.  # noqa: E501
        :type template_index: TemplateIdSchema
        """
        self.swagger_types = {
            'metadata': List[ObservationMetadata],
            'parameters': List[ScienceParameters],
            'template_index': TemplateIdSchema
        }

        self.attribute_map = {
            'metadata': 'metadata',
            'parameters': 'parameters',
            'template_index': 'template_index'
        }
        self._metadata = metadata
        self._parameters = parameters
        self._template_index = template_index

    @classmethod
    def from_dict(cls, dikt) -> 'ScienceTemplate':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ScienceTemplate of this ScienceTemplate.  # noqa: E501
        :rtype: ScienceTemplate
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metadata(self) -> List[ObservationMetadata]:
        """Gets the metadata of this ScienceTemplate.


        :return: The metadata of this ScienceTemplate.
        :rtype: List[ObservationMetadata]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: List[ObservationMetadata]):
        """Sets the metadata of this ScienceTemplate.


        :param metadata: The metadata of this ScienceTemplate.
        :type metadata: List[ObservationMetadata]
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")  # noqa: E501

        self._metadata = metadata

    @property
    def parameters(self) -> List[ScienceParameters]:
        """Gets the parameters of this ScienceTemplate.


        :return: The parameters of this ScienceTemplate.
        :rtype: List[ScienceParameters]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters: List[ScienceParameters]):
        """Sets the parameters of this ScienceTemplate.


        :param parameters: The parameters of this ScienceTemplate.
        :type parameters: List[ScienceParameters]
        """
        if parameters is None:
            raise ValueError("Invalid value for `parameters`, must not be `None`")  # noqa: E501

        self._parameters = parameters

    @property
    def template_index(self) -> TemplateIdSchema:
        """Gets the template_index of this ScienceTemplate.


        :return: The template_index of this ScienceTemplate.
        :rtype: TemplateIdSchema
        """
        return self._template_index

    @template_index.setter
    def template_index(self, template_index: TemplateIdSchema):
        """Sets the template_index of this ScienceTemplate.


        :param template_index: The template_index of this ScienceTemplate.
        :type template_index: TemplateIdSchema
        """

        self._template_index = template_index

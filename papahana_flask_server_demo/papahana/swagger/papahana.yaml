openapi: 3.0.0
info:
  title: Observing Database API
  description: WMKO API to the Observation Management System
  contact:
    email: observing-support@keck.hawaii.edu
  license:
    name: BSD 3-Clause
    url: https://opensource.org/licenses/BSD-3-Clause
  version: "0.1"
servers:
- url: http://localhost:8080/
tags:
- name: Instrument
  externalDocs:
    description: Find out more
    url: https://keckobservatory.atlassian.net/wiki/spaces/DSI/pages/808779858/Programmatic+Web+Interfacej
- name: Semester ID
  externalDocs:
    description: Find out more
    url: https://keckobservatory.atlassian.net/wiki/spaces/DSI/pages/808779858/Programmatic+Web+Interfacej
- name: Containers
  externalDocs:
    description: Find out more
    url: https://keckobservatory.atlassian.net/wiki/spaces/DSI/pages/808779858/Programmatic+Web+Interfacej
- name: Templates
  externalDocs:
    description: Find out more
    url: https://keckobservatory.atlassian.net/wiki/spaces/DSI/pages/808779858/Programmatic+Web+Interfacej
- name: Observation Block
  externalDocs:
    description: Find out more
    url: https://keckobservatory.atlassian.net/wiki/spaces/DSI/pages/808779858/Programmatic+Web+Interfacej

paths:

#  /example/{required_parameter}/more/:

    # get/post/put/delete
#    get:

      # this tells the generate to put it in the control/observers_controller.py
#      tags:
#        - Observers

#      description: view the list of observers associated with the sem_id (program).  The list will include userâ€™s name,  Keck ID,  and institute.

      # this is the name of the method
#      operationId: observer_view

      # all optional and required parameters have to be defined in the parameter: section
      # the definition tells if it is in the query or path,  if it is optional or required
#      parameters:
#        - $ref: '#/components/parameters/required_parameter'

      # define the response
#      responses:
#        "200":
#          description: On success a TBD text version of the OB is returned.
#          content:
#            application/json:
               # the schema need to be defined in the schema section
#              schema:
#                $ref: '#/components/schemas/ObserverList'
#        "400":
#          description: Invalid Program Semester ID (sem_id).
#        "422":
#          description: Program Semester ID (sem_id) not found.

      # these tell the API where to look for the method,  def example_method
#      x-swagger-router-controller: Observer
#      x-openapi-router-controller: papahana.controllers.observers_controller


  /semesterIds/:
    summary: Retrieves all the sem_ids associated with an observer
    get:
      tags:
        - Semester Id
      operationId: sem_id_get
      parameters:
        - $ref: '#/components/parameters/obs_id'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "404":
          description: Observation Id not found.
      x-swagger-router-controller: SemesterId
      x-openapi-router-controller: papahana.controllers.semester_id_controller
  /semesterIds/{semester}/semester/:
    summary: retrieves sem_id of a given semester for an obs_id.
    get:
      tags:
        - Semester Id
      operationId: sem_id_semester_get
      parameters:
        - $ref: '#/components/parameters/semester_path'
        - $ref: '#/components/parameters/obs_id'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "404":
          description: Observation or Semester ID not found.
      x-swagger-router-controller: SemesterId
      x-openapi-router-controller: papahana.controllers.semester_id_controller
  /semesterIds/{sem_id}/ob:
    summary: retrieve the ob_block information of a given semester ID.
    get:
      tags:
        - Semester Id
      operationId: sem_id_ob_get
      parameters:
        - $ref: '#/components/parameters/sem_id'
        - $ref: '#/components/parameters/obs_id'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ObservationBlock'
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "404":
          description: Observation or Semester ID not found
      x-swagger-router-controller: SemesterId
      x-openapi-router-controller: papahana.controllers.semester_id_controller
  /semesterIds/{sem_id}/proposal:
    get:
      tags:
        - Semester Id
      description: retrieves the proposal associated with the program.
      operationId: sem_id_proposal_get
      parameters:
        - $ref: '#/components/parameters/sem_id'
        - $ref: '#/components/parameters/obs_id'
      responses:
        "200":
          description: returns the pdf or ps file of the proposal.
          content:
            application/pdf:
              schema:
                type: string
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "404":
          description: Program not found.
      x-swagger-router-controller: SemesterId
      x-openapi-router-controller: papahana.controllers.semester_id_controller
  /semesterIds/{sem_id}/targets:
    get:
      tags:
        - Semester Id
      description: Retrieves all the targets associated with a program.
      operationId: sem_id_targets_get
      parameters:
        - $ref: '#/components/parameters/sem_id'
        - $ref: '#/components/parameters/obs_id'
      responses:
        "200":
          description: array of targets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Target'
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "404":
          description: Program not found.
      x-swagger-router-controller: SemesterId
      x-openapi-router-controller: papahana.controllers.semester_id_controller
  /semesterIds/{sem_id}/containers:
    get:
      tags:
        - Containers
        - Semester Id
      description: Retrieves all containers associated with a program
      operationId: sem_id_containers_get
      parameters:
        - $ref: '#/components/parameters/sem_id'
        - $ref: '#/components/parameters/obs_id'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Container'
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "404":
          description: Container not found
      x-swagger-router-controller: SemesterId
      x-openapi-router-controller: papahana.controllers.semester_id_controller

  /semesterIds/{sem_id}/ob/submit:
    post:
      tags:
        - Semester Id
      description: Submits a program (OBs).  Uses the obsid in the authentication \
                    header and provided semId to retrieve the proposal file \
                    associated with the program
      operationId: sem_id_submit_post
      parameters:
        - $ref: '#/components/parameters/sem_id'
        - $ref: '#/components/parameters/obs_id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObservationBlock'
        required: true
      responses:
        "201":
          description: OK, new program created.
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "404":
          description: Observation ID not found.
      x-swagger-router-controller: SemesterId
      x-openapi-router-controller: papahana.controllers.semester_id_controller

    put:
      tags:
        - Semester Id
      description: updates a program (OBs)
      operationId: sem_id_submit_put
      parameters:
        - $ref: '#/components/parameters/sem_id'
        - $ref: '#/components/parameters/obs_id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObservationBlock'
      responses:
        "200":
          description: List of objects added to the program
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "404":
          description: Observation ID not found.
      x-swagger-router-controller: SemesterId
      x-openapi-router-controller: papahana.controllers.semester_id_controller

  # new routes
  /semesterIds/{sem_id}/ob/metadata:
   get:
      tags:
        - Semester Id
      description: Retrieves all the observation blocks metadata for a given program.  The default is to exclude completed observation blocks.
      operationId: sem_id_ob_metadata
      parameters:
        - $ref: '#/components/parameters/sem_id'
        - $ref: '#/components/parameters/min_ra'
        - $ref: '#/components/parameters/max_ra'
        - $ref: '#/components/parameters/instrument_optional'
        - $ref: '#/components/parameters/ob_priority'
        - $ref: '#/components/parameters/min_priority'
        - $ref: '#/components/parameters/max_priority'
        - $ref: '#/components/parameters/min_duration'
        - $ref: '#/components/parameters/max_duration'
        - $ref: '#/components/parameters/state'
        - $ref: '#/components/parameters/observable'
        - $ref: '#/components/parameters/completed'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "422":
          description: Invalid parameter
      x-swagger-router-controller: SemesterId
      x-openapi-router-controller: papahana.controllers.semester_id_controller

  /semesterIds/{sem_id}/ob/targets:
   get:
      tags:
        - Semester Id
      description: Retrieves all the target components associated with a program.
      operationId: sem_id_ob_targets
      parameters:
        - $ref: '#/components/parameters/sem_id'
        - $ref: '#/components/parameters/min_ra'
        - $ref: '#/components/parameters/max_ra'
        - $ref: '#/components/parameters/instrument_optional'
        - $ref: '#/components/parameters/ob_priority'
        - $ref: '#/components/parameters/min_priority'
        - $ref: '#/components/parameters/max_priority'
        - $ref: '#/components/parameters/min_duration'
        - $ref: '#/components/parameters/max_duration'
        - $ref: '#/components/parameters/state'
        - $ref: '#/components/parameters/observable'
        - $ref: '#/components/parameters/completed'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "422":
          description: Invalid parameter
      x-swagger-router-controller: SemesterId
      x-openapi-router-controller: papahana.controllers.semester_id_controller

  /semesterIds/{sem_id}/ob/full:
   get:
      tags:
        - Semester Id
      description: Retrieves all the observation blocks in their entirety for a given program. Excludes completed observation blocks.
      operationId: sem_id_ob_full
      parameters:
        - $ref: '#/components/parameters/sem_id'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "422":
          description: Invalid parameter
      x-swagger-router-controller: SemesterId
      x-openapi-router-controller: papahana.controllers.semester_id_controller

  /semesterIds/{sem_id}/ob/full/calibration:
   get:
      tags:
        - Semester Id
      description: Retrieves all the calibration observation blocks in their entirety for a given program.  Excludes completed observation blocks.
      operationId: sem_id_ob_full_cal
      parameters:
        - $ref: '#/components/parameters/sem_id'
        - $ref: '#/components/parameters/instrument_optional'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "422":
          description: Invalid parameter
      x-swagger-router-controller: SemesterId
      x-openapi-router-controller: papahana.controllers.semester_id_controller

  /semesterIds/{sem_id}/ob/full/science:
   get:
      tags:
        - Semester Id
      description: Retrieves all the science observation blocks in their entirety for a given program that are observable for the night.  Excludes completed observation blocks.
      operationId: sem_id_ob_full_sci
      parameters:
        - $ref: '#/components/parameters/sem_id'
        - $ref: '#/components/parameters/min_ra'
        - $ref: '#/components/parameters/max_ra'
        - $ref: '#/components/parameters/instrument_optional'
        - $ref: '#/components/parameters/ob_priority'
        - $ref: '#/components/parameters/min_priority'
        - $ref: '#/components/parameters/max_priority'
        - $ref: '#/components/parameters/min_duration'
        - $ref: '#/components/parameters/max_duration'
        - $ref: '#/components/parameters/state'
        - $ref: '#/components/parameters/observable'
        - $ref: '#/components/parameters/completed'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "422":
          description: Invalid parameter
      x-swagger-router-controller: SemesterId
      x-openapi-router-controller: papahana.controllers.semester_id_controller


  /containers:
    get:
      tags:
        - Containers
      description: Retrieves a specific container's information
      operationId: containers_get
      parameters:
        - $ref: '#/components/parameters/container_id'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Container'
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "404":
          description: Container not found
      x-swagger-router-controller: Containers
      x-openapi-router-controller: papahana.controllers.containers_controller
    put:
      tags:
        - Containers
      description: Overwrites a container
      operationId: containers_put
      parameters:
        - $ref: '#/components/parameters/container_id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Container'
        required: true
      responses:
        "204":
          description: OK
        "401":
          description: Unauthorized
        "404":
          description: Container id not found
      x-swagger-router-controller: Containers
      x-openapi-router-controller: papahana.controllers.containers_controller
    post:
      tags:
        - Containers
      description: Creates a container
      operationId: containers_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Container'
        required: true
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "404":
          description: Container id not found
      x-swagger-router-controller: Containers
      x-openapi-router-controller: papahana.controllers.containers_controller
    delete:
      tags:
        - Containers
      description: Delete container by id
      operationId: containers_delete
      parameters:
        - $ref: '#/components/parameters/container_id'
      responses:
        "204":
          description: Deleted
        "401":
          description: Unauthorized
        "404":
          description: Container id not found
      x-swagger-router-controller: Containers
      x-openapi-router-controller: papahana.controllers.containers_controller
  /containers/append:
    put:
      tags:
      - Containers
      description: Appends an observation block to a container by id
      operationId: containers_append_put
      parameters:
        - $ref: '#/components/parameters/container_id'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        "204":
          description: OK
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "404":
          description: Container not found
      x-swagger-router-controller: Containers
      x-openapi-router-controller: papahana.controllers.containers_controller
  /containers/executionTimes:
    get:
      tags:
      - Containers
      description: Calculate the total execution time of a container
      operationId: containers_execution_times_get
      parameters:
        - $ref: '#/components/parameters/container_id'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: number
                description: miliseconds
                x-content-type: application/json
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "404":
          description: Container not found
      x-swagger-router-controller: Containers
      x-openapi-router-controller: papahana.controllers.containers_controller
  /containers/items:
    get:
      tags:
      - Containers
      description: Retrieves the ordered list of observing blocks in a container
      operationId: containers_items_get
      parameters:
        - $ref: '#/components/parameters/container_id'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ObservationBlock'
                x-content-type: application/json
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "404":
          description: Container not found
      x-swagger-router-controller: Containers
      x-openapi-router-controller: papahana.controllers.containers_controller
  /containers/items/summary:
    get:
      tags:
      - Containers
      description: Retrieves a summary of container information
      operationId: containers_items_summary_get
      parameters:
        - $ref: '#/components/parameters/container_id'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Container'
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "404":
          description: Container not found
      x-swagger-router-controller: Containers
      x-openapi-router-controller: papahana.controllers.containers_controller
  /containers/verify:
    get:
      tags:
      - Containers
      description: Request verification of the elements of a container. Sends container summary
        as a sucessfull response
      operationId: containers_verify_get
      parameters:
        - $ref: '#/components/parameters/container_id'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Container'
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "404":
          description: Container not found
      x-swagger-router-controller: Containers
      x-openapi-router-controller: papahana.controllers.containers_controller
  /containers/scheduleToO:
    post:
      tags:
      - Containers
      description: Submits a container for Target of Opportunity (ToO) (all the elements)
      operationId: containers_schedule_too_post
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Container'
        required: true
      responses:
        "204":
          description: OK
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "404":
          description: Container not found
      x-swagger-router-controller: Containers
      x-openapi-router-controller: papahana.controllers.containers_controller
  /containers/export:
    get:
      tags:
      - Containers
      description: Retrieves a specific container information in a file format (default
        .json)
      operationId: containers_export_get
      parameters:
        - $ref: '#/components/parameters/container_id'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Container'
        "400":
          description: Invalid status value
        "404":
          description: Container not found
      x-swagger-router-controller: Containers
      x-openapi-router-controller: papahana.controllers.containers_controller

  /instrumentPackages/{instrument}:
    get:
      tags:
      - Instrument
      description: Retrieves the available instrument packages for an instrument. The
                   version is optional,  defaults to most recent version.
      operationId: instrument_packages
      parameters:
      - $ref: '#/components/parameters/instrument'
      - $ref: '#/components/parameters/ip_version'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InstrumentPackage'
        "400":
          description: Invalid status value
        "404":
          description: Group not found
      x-swagger-router-controller: Instrument
      x-openapi-router-controller: papahana.controllers.instrument_controller
  /instrumentPackages/{instrument}/parameters:
    get:
      tags:
      - Instrument
      description: List all template parameters that can be attached to OBs using
                   this instrument package. The version is optional,  the default
                   to most recent version.
      operationId: instrument_packages_parameter
      parameters:
      - $ref: '#/components/parameters/instrument'
      - $ref: '#/components/parameters/ip_version'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstrumentPackage'
        "400":
          description: Invalid status value
        "404":
          description: Group not found
      x-swagger-router-controller: Instrument
      x-openapi-router-controller: papahana.controllers.instrument_controller

  /instrumentPackages/{instrument}/templates:
    get:
      tags:
      - Instrument
      - Templates
      description: Retrieves all the specified instrument package templates.
                   The version and template name are optional.  The version
                   defaults to most recent,  and when name is not specified
                   all templates are returned.
      operationId: instrument_packages_template
      parameters:
      - $ref: '#/components/parameters/instrument'
      - $ref: '#/components/parameters/ip_version'
      - $ref: '#/components/parameters/template_name'

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstrumentPackage'
        "400":
          description: Invalid status value
        "404":
          description: Group not found
      x-swagger-router-controller: Instrument
      x-openapi-router-controller: papahana.controllers.instrument_controller

  /instrumentPackages/{instrument}/templates/metadata:
    get:
      tags:
      - Instrument
      - Templates
      description: Retrieves the specified instrument package template metadata.
                   The Instrument Package version and template name are optional.
                   The version defaults to the most recent instrument package version,
                   and when name is not specified all templates are returned.
      operationId: instrument_packages_template_metadata
      parameters:
      - $ref: '#/components/parameters/instrument'
      - $ref: '#/components/parameters/ip_version'
      - $ref: '#/components/parameters/template_name'

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstrumentPackage'
        "400":
          description: Invalid status value
        "404":
          description: Group not found
      x-swagger-router-controller: Instrument
      x-openapi-router-controller: papahana.controllers.instrument_controller

  /instrumentPackages/{instrument}/scripts:
    get:
      tags:
        - Instrument
        - Templates
      description:  Retrieves all the scripts associated with the instrument package.
                    The Instrument Package version is optional,  the default to
                    most recent  Instrument Package version.
      operationId: instrument_packages_scripts
      parameters:
        - $ref: '#/components/parameters/instrument'
        - $ref: '#/components/parameters/ip_version'
        - $ref: '#/components/parameters/script_name'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstrumentPackage'
        "400":
          description: Invalid status value
        "404":
          description: Group not found
      x-swagger-router-controller: Instrument
      x-openapi-router-controller: papahana.controllers.instrument_controller


  /obsBlocks:
    get:
      tags:
      - Observation Block
      description: "Retrieves the general parameters of an OB (target, exec time, other as needed)"
      operationId: ob_get
      parameters:
        - $ref: '#/components/parameters/ob_id'
      responses:
        "200":
          description: On success gets a new OB.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservationBlock'
        "400":
          description: Invalid status value
        "404":
          description: Observation Block not found
      x-swagger-router-controller: Observation
      x-openapi-router-controller: papahana.controllers.observation_block_controller
    put:
      tags:
      - Observation Block
      description: Updates the observation block with the new one
      operationId: ob_put
      parameters:
        - $ref: '#/components/parameters/ob_id'
      requestBody:
        description: Observation block replacing ob_id.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObservationBlock'
        required: true
      responses:
        "204":
          description: On a success replaces the given OB with the updated OB.
        "400":
          description: Invalid status value
        "404":
          description: Observation Block not found
      x-swagger-router-controller: Observation
      x-openapi-router-controller: papahana.controllers.observation_block_controller
    post:
      tags:
      - Observation Block
      description: Inserts an observation block.
      operationId: ob_post
      requestBody:
        description: Observation block to be added.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObservationBlock'
        required: true
      responses:
        "200":
          description: On a success inserts new OB.
          content:
            application/json:
              schema:
                type: string
                description: id of new ob.
                x-content-type: application/json
        "400":
          description: Invalid status value
      x-swagger-router-controller: Observation
      x-openapi-router-controller: papahana.controllers.observation_block_controller
    delete:
      tags:
      - Observation Block
      description: Removes the observation block
      operationId: ob_delete
      parameters:
        - $ref: '#/components/parameters/ob_id'
      responses:
        "204":
          description: On a success removes given OB from the database.
        "400":
          description: Invalid status value
        "404":
          description: Observation Block not found
      x-swagger-router-controller: Observation
      x-openapi-router-controller: papahana.controllers.observation_block_controller

  /obsBlocks/lastVersion:
    get:
      tags:
      - Observation Block
      description: "Retrieves the last saved version an OB."
      operationId: ob_last_version
      parameters:
        - $ref: '#/components/parameters/ob_id'
      responses:
        "200":
          description: On success gets a new OB.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservationBlock'
        "400":
          description: Invalid status value
        "404":
          description: Observation Block not found
      x-swagger-router-controller: Observation
      x-openapi-router-controller: papahana.controllers.observation_block_controller

  /obsBlocks/revisions:
    get:
      tags:
      - Observation Block
      description: "Retrieves the last ten revisions,  unless the number of revisions is specified"
      operationId: ob_revisions
      parameters:
        - $ref: '#/components/parameters/ob_id'
        - $ref: '#/components/parameters/revision_n'
      responses:
        "200":
          description: On success gets a new OB.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservationBlock'
        "400":
          description: Invalid status value
        "404":
          description: Observation Block not found
      x-swagger-router-controller: Observation
      x-openapi-router-controller: papahana.controllers.observation_block_controller

  /obsBlocks/revisions/{revision_index}:
    get:
      tags:
      - Observation Block
      description: "Retrieves the nth (revision_index) revision"
      operationId: ob_revision_index
      parameters:
        - $ref: '#/components/parameters/ob_id'
        - $ref: '#/components/parameters/revision_index'
      responses:
        "200":
          description: On success gets a new OB.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservationBlock'
        "400":
          description: Invalid status value
        "404":
          description: Observation Block not found
      x-swagger-router-controller: Observation
      x-openapi-router-controller: papahana.controllers.observation_block_controller

#
#      /obsBlock/revisions
#      /obsBlock/revisions/{revision_n}
#      /obsBlocks/state/{state}
#      /obsBlocks/scripts
#      /obsBlocks/executionTimeRemaining

  /obsBlocks/template:
    get:
      tags:
        - Observation Block
      description: Retrieves the list of templates associated with the OB
      operationId: ob_templates_get
      parameters:
        - $ref: '#/components/parameters/ob_id'
      responses:
        "200":
          description: Retrieves the list of templates associated with the OB.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TemplateSchema'
        "400":
          description: Invalid status value
        "404":
          description: Observation Block not found
      x-swagger-router-controller: Observation
      x-openapi-router-controller: papahana.controllers.observation_block_controller
    post:
      tags:
        - Observation Block
      description: Creates the list of templates associated with the OB
      operationId: ob_template_post
      parameters:
        - $ref: '#/components/parameters/ob_id'
        - $ref: '#/components/parameters/template_type'
      requestBody:
        content:
          application/json:
            schema:
                oneOf:
                  - $ref: '#/components/schemas/TemplateSchema'
                  - type: array
                    items:
                      $ref: '#/components/schemas/TemplateSchema'
        required: true
      responses:
        "200":
          description: On success inserts a new list of templates associated with the OB.
        "400":
          description: Invalid status value
        "404":
          description: Observation Block not found
      x-swagger-router-controller: Observation
      x-openapi-router-controller: papahana.controllers.observation_block_controller
    put:
      tags:
        - Observation Block
      description: Updates the list of templates associated with the OB
      operationId: ob_template_put
      parameters:
        - $ref: '#/components/parameters/ob_id'
        - $ref: '#/components/parameters/template_type'
      requestBody:
        content:
          application/json:
            schema:
                oneOf:
                  - $ref: '#/components/schemas/TemplateSchema'
                  - type: array
                    items:
                      $ref: '#/components/schemas/TemplateSchema'

        required: true
      responses:
        "204":
          description: On success replaces the given templates with new list of templates.
        "400":
          description: Invalid status value
        "404":
          description: Observation Block not found
      x-swagger-router-controller: Observation
      x-openapi-router-controller: papahana.controllers.observation_block_controller
  /obsBlocks/template/{template_id}:
    get:
      tags:
        - Observation Block
      description: Retrieves the specified template within the OB
      operationId: ob_template_id_get
      parameters:
        - $ref: '#/components/parameters/ob_id'
        - $ref: '#/components/parameters/template_id'
      responses:
        "200":
          description: Retrieves and returns the Template of the observing block being requested
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateSchema'
        "400":
          description: Invalid status value
        "404":
          description: Observation Block not found
      x-swagger-router-controller: Observation
      x-openapi-router-controller: papahana.controllers.observation_block_controller
    put:
      tags:
        - Observation Block
      description: Updates the specified template within the OB
      operationId: ob_template_id_put
      parameters:
        - $ref: '#/components/parameters/ob_id'
        - $ref: '#/components/parameters/template_id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TemplateSchema'
        required: true
      responses:
        "204":
          description: replaces the given Template within the OB with Template of id=templateId
        "400":
          description: Invalid status value
        "404":
          description: Observation Block not found
      x-swagger-router-controller: Observation
      x-openapi-router-controller: papahana.controllers.observation_block_controller
    delete:
      tags:
        - Observation Block
      description: Removes the specified template within the OB
      operationId: ob_template_id_delete
      parameters:
        - $ref: '#/components/parameters/ob_id'
        - $ref: '#/components/parameters/template_id'
      responses:
        "204":
          description: removes the template from the OB
        "400":
          description: Invalid status value
        "404":
          description: Observation Block not found
      x-swagger-router-controller: Observation
      x-openapi-router-controller: papahana.controllers.observation_block_controller
  /obsBlocks/template/{template_id}/{file_parameter}:
    get:
      tags:
        - Observation Block
      description: Retrieves the specified template within the OB
      operationId: ob_template_id_file_get
      parameters:
        - $ref: '#/components/parameters/ob_id'
        - $ref: '#/components/parameters/template_id'
        - $ref: '#/components/parameters/file_parameter'
      responses:
        "200":
          description: Retrieves and returns the Template of the observing block being requested
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateSchema'
        "400":
          description: Invalid status value
        "404":
          description: Observation Block not found
      x-swagger-router-controller: Observation
      x-openapi-router-controller: papahana.controllers.observation_block_controller
    put:
      tags:
        - Observation Block
      description: Updates the specified template within the OB
      operationId: ob_template_id_file_put
      parameters:
        - $ref: '#/components/parameters/ob_id'
        - $ref: '#/components/parameters/template_id'
        - $ref: '#/components/parameters/file_parameter'
      requestBody:
        content:
          text/plain:
            schema:
              type: string
              format: binary
        required: true
      responses:
        "200":
          description: replaces the given Template within the OB with Template of id=templateId
        "400":
          description: Invalid status value
        "404":
          description: Observation Block not found
      x-swagger-router-controller: Observation
      x-openapi-router-controller: papahana.controllers.observation_block_controller
  /obsBlocks/template/duplicate/{template_id}:
    post:
      tags:
        - Observation Block
      description: Generate a new copy of the template and add it to the list of templates in the OB.
      operationId: ob_template_duplicate
      parameters:
        - $ref: '#/components/parameters/ob_id'
        - $ref: '#/components/parameters/template_id'
      responses:
        "200":
          description: returns a copy of the Template within the OB.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateSchema'
        "400":
          description: Invalid status value
        "404":
          description: Observation Block not found
      x-swagger-router-controller: Observation
      x-openapi-router-controller: papahana.controllers.observation_block_controller
  /obsBlocks/completelyFilledIn:
    get:
      tags:
        - Observation Block
      description: Verify that the required parameters have been filled in.
      operationId: ob_template_filled
      parameters:
        - $ref: '#/components/parameters/ob_id'
      responses:
        "200":
          description: On success returns True.
          content:
            application/json:
              schema:
                type: boolean
                x-content-type: application/json
        "400":
          description: Invalid status value
        "404":
          description: Observation Block not found
        "422":
          description: OB is missing required parameters.
      x-swagger-router-controller: Observation
      x-openapi-router-controller: papahana.controllers.observation_block_controller
  /obsBlocks/supplementFiles:
    get:
      tags:
        - Observation Block
      description: Retrieves list of files.
      operationId: ob_template_supplement
      parameters:
        - $ref: '#/components/parameters/ob_id'
      responses:
        "200":
          description: On success gets list of files associated with the OB.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                x-content-type: application/json
        "400":
          description: Invalid status value
        "404":
          description: Observation Block not found
      x-swagger-router-controller: Observation
      x-openapi-router-controller: papahana.controllers.observation_block_controller
  /obsBlocks/timeConstraints:
    get:
      tags:
        - Observation Block
      description: Retrieves the time constraints (from, to).
      operationId: ob_time_constraint_get
      parameters:
        - $ref: '#/components/parameters/ob_id'
      responses:
        "200":
          description: On success retrieves a list of existing time constraint(s) of an OB.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DateSchema'
                x-content-type: application/json
        "400":
          description: Invalid status value
        "404":
          description: Observation Block not found
      x-swagger-router-controller: Observation
      x-openapi-router-controller: papahana.controllers.observation_block_controller
    put:
      tags:
        - Observation Block
      description: Creates / Replaces the time constraints (from, to).
      operationId: ob_time_constraint_put
      parameters:
        - $ref: '#/components/parameters/ob_id'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/DateSchema'
        required: true
      responses:
        "204":
          description: On success updates an existing time constraint(s) of an OB.
        "400":
          description: Invalid input time constraints -- input must be an array.
        "404":
          description: Observation Block not found
      x-swagger-router-controller: Observation
      x-openapi-router-controller: papahana.controllers.observation_block_controller
  /obsBlocks/schedule:
    get:
      tags:
        - Observation Block
      description: Retrieves scheduling information.
      operationId: ob_schedule_get
      parameters:
        - $ref: '#/components/parameters/ob_id'
      responses:
        "200":
          description: On success retrieves the existing ob schedule,  a list of dates.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                x-content-type: application/json
        "400":
          description: Invalid status value
        "404":
          description: Observation Block not found
      x-swagger-router-controller: Observation
      x-openapi-router-controller: papahana.controllers.observation_block_controller
    put:
      tags:
        - Observation Block
      description: On success updates an existing ob schedule.
      operationId: ob_schedule_put
      parameters:
        - $ref: '#/components/parameters/ob_id'
      responses:
        "200":
          description: On success updates an existing time constraint(s) of an OB.
        "400":
          description: Invalid status value
        "404":
          description: Observation Block not found
      x-swagger-router-controller: Observation
      x-openapi-router-controller: papahana.controllers.observation_block_controller
  /obsBlocks/executions:
    get:
      tags:
        - Observation Block
      description: Retrieves the list of execution attempts for a specific OB (for a specific night).
      operationId: ob_executions
      parameters:
        - $ref: '#/components/parameters/ob_id'
      responses:
        "200":
          description: On success retrieves a list of execution attempts of an OB.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DateSchema'
                x-content-type: application/json
        "400":
          description: Invalid status value
        "404":
          description: Observation Block not found
      x-swagger-router-controller: Observation
      x-openapi-router-controller: papahana.controllers.observation_block_controller
  /obsBlocks/executionTime:
    get:
      tags:
        - Observation Block
      description: Calculates the execution time.
      operationId: ob_execution_time
      parameters:
        - $ref: '#/components/parameters/ob_id'
      responses:
        "200":
          description: On success returns an estimated execution time for an OB.
          content:
            application/json:
              schema:
                type: number
                x-content-type: application/json
        "400":
          description: Invalid status value
        "404":
          description: Observation Block not found
      x-swagger-router-controller: Observation
      x-openapi-router-controller: papahana.controllers.observation_block_controller
  /obsBlocks/duplicate:
    post:
      tags:
        - Observation Block
      description: Duplicate the OB, default is current semId.
      operationId: ob_duplicate
      parameters:
        - $ref: '#/components/parameters/ob_id'
        - $ref: '#/components/parameters/sem_id_not_required'
      responses:
        "200":
          description: On success a new OB is generated, with a new unique ID. If needed the OB is associated with a new semester.
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
        "400":
          description: Invalid status value
        "404":
          description: Observation Block not found
      x-swagger-router-controller: Observation
      x-openapi-router-controller: papahana.controllers.observation_block_controller
  /obsBlocks/upgrade:
    post:
      tags:
        - Observation Block
      description: When an instrument package changes, attempts to port an existing OB to the new package, default is the current semId.
      operationId: ob_upgrade
      parameters:
        - $ref: '#/components/parameters/ob_id'
        - $ref: '#/components/parameters/sem_id_not_required'
      responses:
        "200":
          description: On success the new version of the OB is returned, with a new unique ID.  If the upgrade fails (the New OB must pass verification), an error code is generated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservationBlock'
        "400":
          description: Invalid status value
        "404":
          description: Observation Block not found
      x-swagger-router-controller: Observation
      x-openapi-router-controller: papahana.controllers.observation_block_controller
  /obsBlocks/export:
    get:
      tags:
        - Observation Block
      description: Exports an OB in human-readable format.
      operationId: ob_export
      parameters:
        - $ref: '#/components/parameters/ob_id'
      responses:
        "200":
          description: On success a TBD text version of the OB is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservationBlock'
        "400":
          description: Invalid status value
        "404":
          description: Observation Block not found
      x-swagger-router-controller: Observation
      x-openapi-router-controller: papahana.controllers.observation_block_controller

  # observer section
  /observers/{sem_id}/view:
    get:
      tags:
        - Observers
      description: view the list of observers associated with the sem_id (program).  The list will include userâ€™s name,  Keck ID,  and institute.
      operationId: observer_view
      parameters:
        - $ref: '#/components/parameters/sem_id'
      responses:
        "200":
          description: On success a TBD text version of the OB is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObserverList'
        "400":
          description: Invalid Program Semester ID (sem_id).
        "422":
          description: Program Semester ID (sem_id) not found.
      x-swagger-router-controller: Observer
      x-openapi-router-controller: papahana.controllers.observers_controller
  /observers/apikey:
    get:
      tags:
        - Observers
      description: Get the apikey for the autheticated observer.
      operationId: observer_apikey
      responses:
        "200":
          description: On success a TBD text version of the OB is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apikey'
        "400":
          description: Invalid Program Semester ID (sem_id).
        "422":
          description: Program Semester ID (sem_id) not found.
      x-swagger-router-controller: Observer
      x-openapi-router-controller: papahana.controllers.observers_controller

#  /observers/{sem_id}/add/{keck_id}:
#    get:
#      tags:
#        - Observers
#      description: allow access to a program for an observer by Keck ID.
#      operationId: observer_add
#      parameters:
#        - $ref: '#/components/parameters/sem_id'
#        - $ref: '#/components/parameters/keck_id'
#      responses:
#        "200":
#          description: On success the updated observer list is returned.
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/ObserverList'
#        "400":
#          description: Invalid Program Semester ID (sem_id).
#        "422":
#          description: Program Semester ID (sem_id) not found.
#      x-swagger-router-controller: Observer
#      x-openapi-router-controller: papahana.controllers.observers_controller
#  /observers/{sem_id}/remove/{keck_id}:
#    get:
#      tags:
#        - Observers
#      description: remove access to a program for an observer by Keck ID.
#      operationId: observer_remove
#      parameters:
#        - $ref: '#/components/parameters/sem_id'
#        - $ref: '#/components/parameters/keck_id'
#      responses:
#        "200":
#          description: On success the updated observer list is returned.
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/ObserverList'
#        "400":
#          description: Invalid Program Semester ID (sem_id).
#        "422":
#          description: Program Semester ID (sem_id) not found.
#      x-swagger-router-controller: Observer
#      x-openapi-router-controller: papahana.controllers.observers_controller




#  /login:
#    post:
#      summary: Logs in and returns the authentication cookie
#      requestBody:
#        required: true
#        description: A JSON object containing the login and password.
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/LoginRequest'
#      security: []    # no authentication
#      responses:
#        '200':
#          description: >
#            Successfully authenticated.
#            The session ID is returned in a cookie named `JSESSIONID`. You need to include this cookie in subsequent requests.
#          headers:
#            Set-Cookie:
#              schema:
#                type: string
#                example: JSESSIONID=abcde12345; Path=/; HttpOnly
#
#security:
#  - ApiKeyAuth: []     # use the same name as under securitySchemes
#  - ApiKeyUrl: []

components:

#  securitySchemes:
#    ApiKeyAuth:        # arbitrary name for the security scheme
#      type: apiKey
#      in: cookie       # can be "header", "query" or "cookie"
#      name: odb_id  # name of the header, query parameter or cookie
#      # need to implement this function for connexion
#      # https://connexion.readthedocs.io/en/latest/security.html#apikey-authentication
#      x-apikeyInfoFunc: papahana.controllers.authorization_controller.decrypt_key
#
#    ApiKeyUrl:        # arbitrary name for the security scheme
#      type: apiKey
#      in: query       # can be "header", "query" or "cookie"
#      name: odb_id  # name of the header, query parameter or cookie
#      # need to implement this function for connexion
#      # https://connexion.readthedocs.io/en/latest/security.html#apikey-authentication
#      x-apikeyInfoFunc: papahana.controllers.authorization_controller.decrypt_key


  parameters:

    obs_id:
      name: obs_id
      in: query
      description: observer id
      required: true
      style: form
      explode: true
      schema:
        type: integer
      example: 2009

    ob_id:
      name: ob_id
      in: query
      description: observation block ObjectId
      required: true
      style: form
      explode: true
      schema:
        type: string
      example: 621ffc2853e6386db4116fe6

    semester:
      in: query
      name: semester
      description: semester
      style: form
      explode: true
      schema:
        type: string
        pattern: '^\d{4}[AB]$'
      required: false
      example: 2021A

    semester_path:
      name: semester
      in: path
      description: semester id
      required: true
      style: simple
      explode: true
      schema:
        type: string
        pattern: '^\d{4}[AB]$'
      example: 2021A

    keck_id:
      name: keck_id
      in: path
      description: semester id
      required: true
      style: simple
      explode: true
      schema:
        type: integer
      example: 0456

    sem_id:
      name: sem_id
      in: path
      description: semester id
      required: true
      style: simple
      explode: true
      schema:
        $ref: '#/components/schemas/SemIdSchema'
      example: 2021A_U456
    sem_id_in_query:
      in: query
      name: sem_id
      description: semester id
      required: true
      explode: true
      schema:
        $ref: '#/components/schemas/SemIdSchema'
      example: 2021A
    sem_id_not_required:
      in: query
      name: sem_id
      description: program id including semester
      style: form
      explode: true
      schema:
        $ref: '#/components/schemas/SemIdSchema'
      required: false
      example: 2021A_U456

    template_type:
      in: query
      name: template_type
      description: A string to indicate template,  (acquisition, science, engineering, calibration)
      required: true
      explode: true
      schema:
        type: string
        enum:
        - acquisition
        - science
        - engineering
        - calibration
      example: science

    instrument:
      name: instrument
      in: path
      description: instrument used to make observation
      required: true
      style: simple
      explode: false
      schema:
        $ref: '#/components/schemas/InstrumentEnum'
      example: KCWI

    ip_version:
      name: ip_version
      in: query
      description: ip version description here
      required: false
      style: form
      explode: false
      schema:
        type: string
      example: 0.1.0

    script_name:
      name: script_name
      in: query
      description: the name of the script to retrieve
      required: false
      style: form
      explode: false
      schema:
        type: string
      example: KCWI_ifu_sci_stare

    template_id:
      name: template_id
      in: path
      description: index of template within the OB.
      required: true
      style: simple
      explode: false
      schema:
        type: integer
      example: seq2

    file_parameter:
      name: file_parameter
      in: path
      description: file type
      required: true
      style: simple
      explode: false
      schema:
        type: string
        enum:
          - csv
          - json
          - html
          - txt
      example: json

    template_name:
      name: template_name
      in: query
      description: template name description goes here
      required: false
      style: form
      explode: false
      schema:
        type: string
      example: "KCWI_ifu_sci_stare"

    container_id:
      name: container_id
      in: query
      description: ObjectId of the container identifier.
      required: true
      explode: true
      schema:
        type: string
      example: 621ffdb8aa42780c3071a651

    # ODT / Planning Tool Specific Parameters
#    ra_range:
#      name: ra_range
#      in: query
#      description: the right ascension range
#      style: form
#      explode: true
#      schema:
#        $ref: '#/components/schemas/RaRangeSchema'
#      required: false
#      example: "12:30:00.0-14:30:00.0"
    min_ra:
      name: min_ra
      in: query
      description: the minimum right ascension
      style: form
      explode: true
      schema:
        $ref: '#/components/schemas/RASchema'
      required: false
      example: "12:30:00.0"
    max_ra:
      name: max_ra
      in: query
      description: the maximum right ascension
      style: form
      explode: true
      schema:
        $ref: '#/components/schemas/RASchema'
      required: false
      example: "12:30:00.0"
    instrument_optional:
      name: instrument
      in: query
      description: restrict results to a specific Instrument
      style: form
      explode: false
      schema:
        $ref: '#/components/schemas/InstrumentEnum'
      required: false
      example: "KCWI"
    ob_priority:
      name: ob_priority
      in: query
      description: return results with a given priority.
      required: false
      style: form
      explode: false
      schema:
        type: integer
    min_priority:
      name: min_priority
      in: query
      description: only return results with priority greater than or equal to minimum.
      required: false
      style: form
      explode: false
      schema:
        type: integer
    max_priority:
      name: max_priority
      in: query
      description:  only return results with priority less than to max.
      required: false
      style: form
      explode: false
      schema:
        type: integer
    min_duration:
      name: min_duration
      in: query
      description: only return results that have a duration greater than or equal to the min_duration.  The duration unit is minutes.
      required: false
      style: form
      explode: false
      schema:
        type: number
    max_duration:
      name: max_duration
      in: query
      description: only return results that have a duration less than or equal to the max_duration.  The duration unit is minutes.
      required: false
      style: form
      explode: false
      schema:
        type: number
    state:
      name: state
      in: query
      description: return OBs of a certain state,  the possible states are defined in â€˜Defined Typesâ€™.
      required: false
      style: form
      explode: false
      schema:
        type: string
    observable:
      name: observable
      in: query
      description: only return results that are observable for current UT to sunrise.  The duration is not taken into consideration. Default is false (0),  use observable=1 for only OBs that are observable.
      required: false
      style: form
      explode: false
      schema:
        type: boolean
    completed:
      name: completed
      in: query
      description: return results that are completed.  The default is false (0),  use completed=1 for only OBs that are observable.
      required: false
      style: form
      explode: false
      schema:
        type: boolean
    revision_n:
      name: revision_n
      in: query
      description: The number of revisions to return
      required: false
      style: form
      explode: false
      schema:
        type: integer
      example: 5
    revision_index:
      name: revision_index
      in: path
      description: The index of the single revision to return.
      required: true
      style: simple
      explode: false
      schema:
        type: integer
      example: 7


  schemas:

    apikey:
      type: string

    Container:
      required:
        - name
        - sem_id
        - observation_blocks
      type: object
      properties:
        name:
          type: string
        sem_id:
          $ref: '#/components/schemas/SemIdSchema'
        observation_blocks:
          type: array
          items:
            type: string
          default: []
        comment:
          type: string

    ObservationBlock:
      required:
        - metadata
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/ObsBlockMetadata'
        target:
          $ref: '#/components/schemas/Target'
        acquisition:
          $ref: '#/components/schemas/Acquisition'
        sequences:
          type: array
          items:
            $ref: '#/components/schemas/ScienceTemplate'
        # TODO add calibration and eng templates here
#        observation:
#          type: array
#          items:
#            $ref: '#/components/schemas/ObservationTemplate'
        associations:
          type: array
          items:
            type: string
        status:
          $ref: '#/components/schemas/Status'
        time_constraints:
          type: array
          items:
            $ref: '#/components/schemas/DateSchema'
#          example: "2021-04-22 13:22:36"
        comment:
          type: string
          example:
            A great Observation Block.

    ObsBlockMetadata:
      required:
        - name
        - version
        - priority
        - ob_type
        - pi_id
        - sem_id
        - instrument
      type: object
      properties:
        name:
          type: string
        version:
          type: number
        ob_type:
          type: string
          enum:
            - science
            - calibration
            - engineering
        priority:
          type: integer
        pi_id:
          type: integer
        sem_id:
          $ref: '#/components/schemas/SemIdSchema'
        instrument:
          $ref: '#/components/schemas/InstrumentEnum'
        comment:
          type: string
      example:
        name: "standard stars #9"
        version: 0.1
        pi_id: 7766
        sem_id: "2021A_U046"
        instrument: "KCWI"
        comment: "All I see are stars."

    ObservationTemplate:
      # TODO this is a place holder until Eng and Cal templates are added.
      type: object
      properties:
        metadata:
          type: array
          items:
            $ref: '#/components/schemas/ObservationMetadata'

    ScienceTemplate:
      required:
        - metadata
        - parameters
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/ObservationMetadata'
        parameters:
          $ref: '#/components/schemas/ScienceParameters'

    Acquisition:
      required:
      - metadata
      - parameters
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/ObservationMetadata'
        parameters:
          $ref: '#/components/schemas/AcquisitionParameters'

    ObservationMetadata:
      required:
        - name
        - ui_name
        - instrument
        - version
        - script
        - sequece_number
      type: object
      properties:
        name:
          type: string
        ui_name:
          type: string
        instrument:
          $ref: '#/components/schemas/InstrumentEnum'
        template_type:
          type: string
          enum:
            - "acquisition"
            - "science"
            - "engineering"
            - "calibration"
          default: "science"
        version:
          type: string
        script:
          type: string
        sequece_number:
          type: integer
      example:
        name: KCWI_ifu_acq_offsetStar
        ui_name: KCWI direct
        instrument: KCWI
        template_type: acquisition
        version: 0.1.1
        script: KCWI_ifu_acq_offsetStar
        sequence_number: 0

    AcquisitionParameters:
      required:
        - tcs_coord_po
      type: object
      properties:
        tcs_coord_po:
          type: string

    ScienceParameters:
      required:
        - det1_exp_time
        - det1_exp_number
      type: object
      properties:
        det1_exp_time:
          type: number
        det1_exp_number:
          type: integer

    # TODO add IP template description
    InstrumentPackage:
      description: Instrument package description goes here
    # TODO add observer list schema
    ObserverList:
      description: Observer List description goes here

    Target:
      required:
      - metadata
      - parameters
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/TargetMetadata'
        parameters:
          $ref: '#/components/schemas/TargetParameters'
    TargetMetadata:
      required:
        - name
        - ui_name
        - template_type
        - version
      type: object
      properties:
        name:
          type: string
        ui_name:
          type: string
        template_type:
          type: string
          enum:
            - "target"
          default: "target"
        version:
          type: string
      example:
        name: multi_object_target
        ui_name: Multi-Object Spectroscopy Target
        instrument: KCWI
        version: 0.1.1

    TargetParameters:
      required:
        - target_info_name
        - target_coord_ra
        - target_coord_dec
      type: object
      properties:
        target_info_name:
          type: string
        target_coord_ra:
          $ref: '#/components/schemas/RASchema'
        target_coord_dec:
          $ref: '#/components/schemas/DecSchema'
      example:
        target_info_name: super bright star
        target_coord_ra: 23:55:05
        target_coord_dec: -02:13:50

#       name:
#          type: string
#        ra:
#          $ref: '#/components/schemas/RASchema'
#        dec:
#          $ref: '#/components/schemas/DecSchema'
#        equinox:
#          type: string
#          default: "J2000"
#        frame:
#          type: string
#          default: "Fk5"
#        PA:
#          type: number
#          default: 0.0
#        pm_ra:
#          type: number
#          default: 0.0
#        pm_dec:
#          type: number
#          default: 0.0
#        epoch:
#          type: number
#          default: 2000.0
#        obstime:
#          type: string
#        magnitude:
#          type: array
#          items:
#            $ref: '#/components/schemas/Magnitude'
#        dra:
#          type: number
#          default: 0.0
#        ddec:
#          type: number
#          default: 0.0
#        comment:
#          type: string
#      example:
#        name: A Stellar Galaxy
#        ra: '15:01:01'
#        dec: '20:00:02.2'
#        equinox: J2000
#        frame: Fk5
#        PA: -90.0
#        pm_ra: 5.96
#        pm_dec: 5.6373
#        obstime: 2021-04-22 15:08:04
#        comment: comment
#        magnitude:
#          magnitude: 14.5
#          band: J
#



    Status:
      type: object
      properties:
        state:
          type: string
          oneOf:
            - pattern: '^[Pp]artially defined$'
            - pattern: '^[Dd]efined$'
            - pattern: '^[Rr]eview$'
            - pattern: '^[Rr]ejected$'
            - pattern: '^[Dd]raft$'
            - pattern: '^[Ss]tarted$'
            - pattern: '^[Ee]xecuted$'
            - pattern: '^[Cc]ompleted$'
            - pattern: '^[Ff]ailed$'
            - pattern: '^[Tt]erminated$'
            - pattern: '^[Ss]topped$'
            - pattern: '^[Dd]one$'
          default: started
        executions:
          type: array
          items:
            $ref: '#/components/schemas/DateSchema'
          default: []
        deleted:
          type: boolean
          default: false

    Magnitude:
      required:
      - band
      - magnitude
      type: object
      properties:
        band:
          type: string
        magnitude:
          type: number
      example:
        magnitude: 14.7
        band: K

    FindingChart:
      description: Finding chart description goes here

    InstrumentEnum:
      type: string
      oneOf:
        - pattern: '^[Kk][Cc][Ww][Ii]$'
        - pattern: '^[Dd][Ee][Ii][Mm][Oo][Ss]'
        - pattern: '^[Ee][Ss][Ii]$'
        - pattern: '^[Hh][Ii][Rr][Ee][Ss]$'
        - pattern: '^[Ll][Rr][Ii][Ss]$'
        - pattern: '^[Mm][Oo][Ss][Ff][Ii][Rr][Ee]$'
        - pattern: '^[Nn][Ii][Re][Ss]$'
        - pattern: '^[Nn][Ii][Re][Cc]2$'
        - enum:
          - DE
          - DF
          - EI
          - HI
          - KB
          - KF
          - LB
          - LR
          - MF
          - OI
          - OS
          - NR
          - NI
          - NS
          - N2
          - NC

    RASchema:
      type: string
      oneOf:
        - pattern: '^\d{2}:\d{2}:\d{2}$'
        - pattern: '^\d{2}:\d{2}:\d{2}.\d{1}$'
        - pattern: '^\d{2}:\d{2}:\d{2}.\d{2}$'
      example: "12:32:14.4"

    DecSchema:
      type: string
      oneOf:
        - pattern: '^\d{2}:\d{2}:\d{2}$'
        - pattern: '^\d{2}:\d{2}:\d{2}.\d{1}$'
        - pattern: '^\d{2}:\d{2}:\d{2}.\d{2}$'
        - pattern: '^-\d{2}:\d{2}:\d{2}$'
        - pattern: '^-\d{2}:\d{2}:\d{2}.\d{1}$'
        - pattern: '^-\d{2}:\d{2}:\d{2}.\d{2}$'
      example: "19:32:28.4"

    DitherSchema:
      required:
        - ra_offset
        - dec_offset
        - position
        - guided
      type: object
      properties:
        ra_offset:
          type: number
        dec_offset:
          type: number
        position:
          type: string
          enum:
            - T
            - S
            - O
        guided:
          type: boolean

    SemIdSchema:
      type: string
      pattern: '^\d{4}[AB]_[A-Z]\d{3}$'
      example: "2021A_U123"

    TemplateSchema:
      oneOf:
          - $ref: '#/components/schemas/ObservationTemplate'
          - $ref: '#/components/schemas/ScienceTemplate'

    DateSchema:
      type: string
      pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
      example: "2021-04-22 13:22:36"

    # new schema
    RaRangeSchema:
      type: string
      pattern: '^\d{2}:\d{2}:\d{2}\.?\d{*}$-^\d{2}:\d{2}:\d{2}\.?\d{*}$'
      example: '12:30:00.0-14:30:00.0'


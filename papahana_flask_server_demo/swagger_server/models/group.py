# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Group(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, group_id: str=None, observation_blocks: List[str]=None, semester: str=None, program_id: str=None, comment: str=None):  # noqa: E501
        """Group - a model defined in Swagger
        :param group_id: The group_id of this Group.  # noqa: E501
        :type group_id: str
        :param observation_blocks: The observation_blocks of this Group.  # noqa: E501
        :type observation_blocks: List[str]
        :param semester: The semester of this Group.  # noqa: E501
        :type semester: str
        :param program_id: The program_id of this Group.  # noqa: E501
        :type program_id: str
        :param comment: The comment of this Group.  # noqa: E501
        :type comment: str
        """
        self.swagger_types = {
            'group_id': str,
            'observation_blocks': List[str],
            'semester': str,
            'program_id': str,
            'comment': str
        }

        self.attribute_map = {
            'group_id': 'group_id',
            'observation_blocks': 'observation_blocks',
            'semester': 'semester',
            'program_id': 'program_id',
            'comment': 'comment'
        }
        self._group_id = group_id
        self._observation_blocks = observation_blocks
        self._semester = semester
        self._program_id = program_id
        self._comment = comment

    @classmethod
    def from_dict(cls, dikt) -> 'Group':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Group of this Group.  # noqa: E501
        :rtype: Group
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group_id(self) -> str:
        """Gets the group_id of this Group.


        :return: The group_id of this Group.
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id: str):
        """Sets the group_id of this Group.


        :param group_id: The group_id of this Group.
        :type group_id: str
        """
        if group_id is None:
            raise ValueError("Invalid value for `group_id`, must not be `None`")  # noqa: E501

        self._group_id = group_id

    @property
    def observation_blocks(self) -> List[str]:
        """Gets the observation_blocks of this Group.


        :return: The observation_blocks of this Group.
        :rtype: List[str]
        """
        return self._observation_blocks

    @observation_blocks.setter
    def observation_blocks(self, observation_blocks: List[str]):
        """Sets the observation_blocks of this Group.


        :param observation_blocks: The observation_blocks of this Group.
        :type observation_blocks: List[str]
        """
        if observation_blocks is None:
            raise ValueError("Invalid value for `observation_blocks`, must not be `None`")  # noqa: E501

        self._observation_blocks = observation_blocks
    @property
    def semester(self) -> str:
        """Gets the semester of this Group.


        :return: The semester of this Group.
        :rtype: str
        """
        return self._semester

    @semester.setter
    def semester(self, semester: str):
        """Sets the semester of this Group.


        :param semester: The semester of this Group.
        :type semester: str
        """
        if semester is None:
            raise ValueError("Invalid value for `semester`, must not be `None`")  # noqa: E501

        self._semester = semester

    @property
    def program_id(self) -> str:
        """Gets the program_id of this Group.


        :return: The program_id of this Group.
        :rtype: str
        """
        return self._program_id

    @program_id.setter
    def program_id(self, program_id: str):
        """Sets the program_id of this Group.


        :param program_id: The program_id of this Group.
        :type program_id: str
        """
        if program_id is None:
            raise ValueError("Invalid value for `program_id`, must not be `None`")  # noqa: E501

        self._program_id = program_id

    @property
    def comment(self) -> str:
        """Gets the comment of this Group.


        :return: The comment of this Group.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment: str):
        """Sets the comment of this Group.


        :param comment: The comment of this Group.
        :type comment: str
        """

        self._comment = comment

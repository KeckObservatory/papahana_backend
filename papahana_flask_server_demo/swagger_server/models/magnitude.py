# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Magnitude(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, band: str=None, magnitude: str=None, template: bool=None):  # noqa: E501
        """Magnitude - a model defined in Swagger

        :param band: The band of this Magnitude.  # noqa: E501
        :type band: str
        :param magnitude: The magnitude of this Magnitude.  # noqa: E501
        :type magnitude: str
        :param template: The template of this Magnitude.  # noqa: E501
        :type template: bool
        """
        self.swagger_types = {
            'band': str,
            'magnitude': str,
            'template': bool
        }

        self.attribute_map = {
            'band': 'band',
            'magnitude': 'magnitude',
            'template': 'template'
        }
        self._band = band
        self._magnitude = magnitude
        self._template = template

    @classmethod
    def from_dict(cls, dikt) -> 'Magnitude':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Magnitude of this Magnitude.  # noqa: E501
        :rtype: Magnitude
        """
        return util.deserialize_model(dikt, cls)

    @property
    def band(self) -> str:
        """Gets the band of this Magnitude.


        :return: The band of this Magnitude.
        :rtype: str
        """
        return self._band

    @band.setter
    def band(self, band: str):
        """Sets the band of this Magnitude.


        :param band: The band of this Magnitude.
        :type band: str
        """
        if band is None:
            raise ValueError("Invalid value for `band`, must not be `None`")  # noqa: E501

        self._band = band

    @property
    def magnitude(self) -> str:
        """Gets the magnitude of this Magnitude.


        :return: The magnitude of this Magnitude.
        :rtype: str
        """
        return self._magnitude

    @magnitude.setter
    def magnitude(self, magnitude: str):
        """Sets the magnitude of this Magnitude.


        :param magnitude: The magnitude of this Magnitude.
        :type magnitude: str
        """
        if magnitude is None:
            raise ValueError("Invalid value for `magnitude`, must not be `None`")  # noqa: E501

        self._magnitude = magnitude

    @property
    def template(self) -> bool:
        """Gets the template of this Magnitude.


        :return: The template of this Magnitude.
        :rtype: bool
        """
        return self._template

    @template.setter
    def template(self, template: bool):
        """Sets the template of this Magnitude.


        :param template: The template of this Magnitude.
        :type template: bool
        """
        if template is None:
            raise ValueError("Invalid value for `template`, must not be `None`")  # noqa: E501

        self._template = template

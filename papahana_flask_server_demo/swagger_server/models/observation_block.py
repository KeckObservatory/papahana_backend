# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.acquisition import Acquisition  # noqa: F401,E501
from swagger_server.models.observation import Observation  # noqa: F401,E501
from swagger_server.models.signature import Signature  # noqa: F401,E501
from swagger_server.models.status import Status  # noqa: F401,E501
from swagger_server.models.target import Target  # noqa: F401,E501
from swagger_server import util


class ObservationBlock(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
<<<<<<< HEAD
<<<<<<< Updated upstream
    def __init__(self, id: str=None, signature: Signature=None, target: List[Target]=None, acquisition: Acquisition=None, observations: List[Observation]=None, associations: List[str]=None, observation_type: List[str]=None, priority: float=None, comment: str=None):  # noqa: E501
=======
    def __init__(self, id: str=None, signature: Signature=None, target: Target=None, acquisition: Acquisition=None, observations: List[Observation]=None, associations: List[str]=None, observation_type: List[str]=None, priority: float=None, status: Status=None, comment: str=None):  # noqa: E501
>>>>>>> Stashed changes
=======
    def __init__(self, id: str=None, signature: Signature=None, target: List[Target]=None, acquisition: Acquisition=None, observations: List[Observation]=None, associations: List[str]=None, observation_type: List[str]=None, priority: float=None, status: Status=None, comment: str=None):  # noqa: E501
>>>>>>> main
        """ObservationBlock - a model defined in Swagger

        :param id: The id of this ObservationBlock.  # noqa: E501
        :type id: str
        :param signature: The signature of this ObservationBlock.  # noqa: E501
        :type signature: Signature
        :param target: The target of this ObservationBlock.  # noqa: E501
        :type target: Target
        :param acquisition: The acquisition of this ObservationBlock.  # noqa: E501
        :type acquisition: Acquisition
        :param observations: The observations of this ObservationBlock.  # noqa: E501
        :type observations: List[Observation]
        :param associations: The associations of this ObservationBlock.  # noqa: E501
        :type associations: List[str]
        :param observation_type: The observation_type of this ObservationBlock.  # noqa: E501
        :type observation_type: List[str]
        :param priority: The priority of this ObservationBlock.  # noqa: E501
        :type priority: float
        :param status: The status of this ObservationBlock.  # noqa: E501
        :type status: Status
        :param comment: The comment of this ObservationBlock.  # noqa: E501
        :type comment: str
        """
        self.swagger_types = {
            'id': str,
            'signature': Signature,
            'target': Target,
            'acquisition': Acquisition,
            'observations': List[Observation],
            'associations': List[str],
            'observation_type': List[str],
            'priority': float,
            'status': Status,
            'comment': str
        }

        self.attribute_map = {
            'id': 'id',
            'signature': 'signature',
            'target': 'target',
            'acquisition': 'acquisition',
            'observations': 'observations',
            'associations': 'associations',
            'observation_type': 'observation_type',
            'priority': 'priority',
            'status': 'status',
            'comment': 'comment'
        }
        self._id = id
        self._signature = signature
        self._target = target
        self._acquisition = acquisition
        self._observations = observations
        self._associations = associations
        self._observation_type = observation_type
        self._priority = priority
        self._status = status
        self._comment = comment

    @classmethod
    def from_dict(cls, dikt) -> 'ObservationBlock':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ObservationBlock of this ObservationBlock.  # noqa: E501
        :rtype: ObservationBlock
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this ObservationBlock.


        :return: The id of this ObservationBlock.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this ObservationBlock.


        :param id: The id of this ObservationBlock.
        :type id: str
        """

        self._id = id

    @property
    def signature(self) -> Signature:
        """Gets the signature of this ObservationBlock.


        :return: The signature of this ObservationBlock.
        :rtype: Signature
        """
        return self._signature

    @signature.setter
    def signature(self, signature: Signature):
        """Sets the signature of this ObservationBlock.


        :param signature: The signature of this ObservationBlock.
        :type signature: Signature
        """

        self._signature = signature

    @property
    def target(self) -> Target:
        """Gets the target of this ObservationBlock.


        :return: The target of this ObservationBlock.
        :rtype: Target
        """
        return self._target

    @target.setter
    def target(self, target: Target):
        """Sets the target of this ObservationBlock.


        :param target: The target of this ObservationBlock.
        :type target: Target
        """

        self._target = target

    @property
    def acquisition(self) -> Acquisition:
        """Gets the acquisition of this ObservationBlock.


        :return: The acquisition of this ObservationBlock.
        :rtype: Acquisition
        """
        return self._acquisition

    @acquisition.setter
    def acquisition(self, acquisition: Acquisition):
        """Sets the acquisition of this ObservationBlock.


        :param acquisition: The acquisition of this ObservationBlock.
        :type acquisition: Acquisition
        """

        self._acquisition = acquisition

    @property
    def observations(self) -> List[Observation]:
        """Gets the observations of this ObservationBlock.


        :return: The observations of this ObservationBlock.
        :rtype: List[Observation]
        """
        return self._observations

    @observations.setter
    def observations(self, observations: List[Observation]):
        """Sets the observations of this ObservationBlock.


        :param observations: The observations of this ObservationBlock.
        :type observations: List[Observation]
        """

        self._observations = observations

    @property
    def associations(self) -> List[str]:
        """Gets the associations of this ObservationBlock.


        :return: The associations of this ObservationBlock.
        :rtype: List[str]
        """
        return self._associations

    @associations.setter
    def associations(self, associations: List[str]):
        """Sets the associations of this ObservationBlock.


        :param associations: The associations of this ObservationBlock.
        :type associations: List[str]
        """

        self._associations = associations

    @property
    def observation_type(self) -> List[str]:
        """Gets the observation_type of this ObservationBlock.


        :return: The observation_type of this ObservationBlock.
        :rtype: List[str]
        """
        return self._observation_type

    @observation_type.setter
    def observation_type(self, observation_type: List[str]):
        """Sets the observation_type of this ObservationBlock.


        :param observation_type: The observation_type of this ObservationBlock.
        :type observation_type: List[str]
        """

        self._observation_type = observation_type

    @property
    def priority(self) -> float:
        """Gets the priority of this ObservationBlock.


        :return: The priority of this ObservationBlock.
        :rtype: float
        """
        return self._priority

    @priority.setter
    def priority(self, priority: float):
        """Sets the priority of this ObservationBlock.


        :param priority: The priority of this ObservationBlock.
        :type priority: float
        """

        self._priority = priority

    @property
    def status(self) -> Status:
        """Gets the status of this ObservationBlock.


        :return: The status of this ObservationBlock.
        :rtype: Status
        """
        return self._status

    @status.setter
    def status(self, status: Status):
        """Sets the status of this ObservationBlock.


        :param status: The status of this ObservationBlock.
        :type status: Status
        """

        self._status = status

    @property
    def comment(self) -> str:
        """Gets the comment of this ObservationBlock.


        :return: The comment of this ObservationBlock.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment: str):
        """Sets the comment of this ObservationBlock.


        :param comment: The comment of this ObservationBlock.
        :type comment: str
        """

        self._comment = comment

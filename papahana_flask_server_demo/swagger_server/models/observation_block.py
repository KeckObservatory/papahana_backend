# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.acquisition import Acquisition  # noqa: F401,E501
from swagger_server.models.observation import Observation  # noqa: F401,E501
from swagger_server.models.target import Target  # noqa: F401,E501
from swagger_server import util


class ObservationBlock(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, sem_id: str=None, obs_ids: List[str]=None, target: List[Target]=None, acquisition: Acquisition=None, observations: List[Observation]=None, associations: List[str]=None, observation_type: List[str]=None):  # noqa: E501
        """ObservationBlock - a model defined in Swagger

        :param sem_id: The sem_id of this ObservationBlock.  # noqa: E501
        :type sem_id: str
        :param obs_ids: The obs_ids of this ObservationBlock.  # noqa: E501
        :type obs_ids: List[str]
        :param target: The target of this ObservationBlock.  # noqa: E501
        :type target: List[Target]
        :param acquisition: The acquisition of this ObservationBlock.  # noqa: E501
        :type acquisition: Acquisition
        :param observations: The observations of this ObservationBlock.  # noqa: E501
        :type observations: List[Observation]
        :param associations: The associations of this ObservationBlock.  # noqa: E501
        :type associations: List[str]
        :param observation_type: The observation_type of this ObservationBlock.  # noqa: E501
        :type observation_type: List[str]
        """
        self.swagger_types = {
            'sem_id': str,
            'obs_ids': List[str],
            'target': List[Target],
            'acquisition': Acquisition,
            'observations': List[Observation],
            'associations': List[str],
            'observation_type': List[str]
        }

        self.attribute_map = {
            'sem_id': 'sem_id',
            'obs_ids': 'obs_ids',
            'target': 'target',
            'acquisition': 'acquisition',
            'observations': 'observations',
            'associations': 'associations',
            'observation_type': 'observation_type'
        }
        self._sem_id = sem_id
        self._obs_ids = obs_ids
        self._target = target
        self._acquisition = acquisition
        self._observations = observations
        self._associations = associations
        self._observation_type = observation_type

    @classmethod
    def from_dict(cls, dikt) -> 'ObservationBlock':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ObservationBlock of this ObservationBlock.  # noqa: E501
        :rtype: ObservationBlock
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sem_id(self) -> str:
        """Gets the sem_id of this ObservationBlock.


        :return: The sem_id of this ObservationBlock.
        :rtype: str
        """
        return self._sem_id

    @sem_id.setter
    def sem_id(self, sem_id: str):
        """Sets the sem_id of this ObservationBlock.


        :param sem_id: The sem_id of this ObservationBlock.
        :type sem_id: str
        """

        self._sem_id = sem_id

    @property
    def obs_ids(self) -> List[str]:
        """Gets the obs_ids of this ObservationBlock.


        :return: The obs_ids of this ObservationBlock.
        :rtype: List[str]
        """
        return self._obs_ids

    @obs_ids.setter
    def obs_ids(self, obs_ids: List[str]):
        """Sets the obs_ids of this ObservationBlock.


        :param obs_ids: The obs_ids of this ObservationBlock.
        :type obs_ids: List[str]
        """

        self._obs_ids = obs_ids

    @property
    def target(self) -> List[Target]:
        """Gets the target of this ObservationBlock.


        :return: The target of this ObservationBlock.
        :rtype: List[Target]
        """
        return self._target

    @target.setter
    def target(self, target: List[Target]):
        """Sets the target of this ObservationBlock.


        :param target: The target of this ObservationBlock.
        :type target: List[Target]
        """

        self._target = target

    @property
    def acquisition(self) -> Acquisition:
        """Gets the acquisition of this ObservationBlock.


        :return: The acquisition of this ObservationBlock.
        :rtype: Acquisition
        """
        return self._acquisition

    @acquisition.setter
    def acquisition(self, acquisition: Acquisition):
        """Sets the acquisition of this ObservationBlock.


        :param acquisition: The acquisition of this ObservationBlock.
        :type acquisition: Acquisition
        """

        self._acquisition = acquisition

    @property
    def observations(self) -> List[Observation]:
        """Gets the observations of this ObservationBlock.


        :return: The observations of this ObservationBlock.
        :rtype: List[Observation]
        """
        return self._observations

    @observations.setter
    def observations(self, observations: List[Observation]):
        """Sets the observations of this ObservationBlock.


        :param observations: The observations of this ObservationBlock.
        :type observations: List[Observation]
        """

        self._observations = observations

    @property
    def associations(self) -> List[str]:
        """Gets the associations of this ObservationBlock.


        :return: The associations of this ObservationBlock.
        :rtype: List[str]
        """
        return self._associations

    @associations.setter
    def associations(self, associations: List[str]):
        """Sets the associations of this ObservationBlock.


        :param associations: The associations of this ObservationBlock.
        :type associations: List[str]
        """

        self._associations = associations

    @property
    def observation_type(self) -> List[str]:
        """Gets the observation_type of this ObservationBlock.


        :return: The observation_type of this ObservationBlock.
        :rtype: List[str]
        """
        return self._observation_type

    @observation_type.setter
    def observation_type(self, observation_type: List[str]):
        """Sets the observation_type of this ObservationBlock.


        :param observation_type: The observation_type of this ObservationBlock.
        :type observation_type: List[str]
        """

        self._observation_type = observation_type

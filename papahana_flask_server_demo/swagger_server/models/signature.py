# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Signature(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, pi: str=None, semester: str=None, observers: List[str]=None, programs: List[str]=None, group: List[str]=None, comment: str=None):  # noqa: E501
        """Signature - a model defined in Swagger

        :param pi: The pi of this Signature.  # noqa: E501
        :type pi: str
        :param semester: The semester of this Signature.  # noqa: E501
        :type semester: str
        :param observers: The observers of this Signature.  # noqa: E501
        :type observers: List[str]
        :param programs: The programs of this Signature.  # noqa: E501
        :type programs: List[str]
        :param group: The group of this Signature.  # noqa: E501
        :type group: List[str]
        :param comment: The comment of this Signature.  # noqa: E501
        :type comment: str
        """
        self.swagger_types = {
            'pi': str,
            'semester': str,
            'observers': List[str],
            'programs': List[str],
            'group': List[str],
            'comment': str
        }

        self.attribute_map = {
            'pi': 'pi',
            'semester': 'semester',
            'observers': 'observers',
            'programs': 'programs',
            'group': 'group',
            'comment': 'comment'
        }
        self._pi = pi
        self._semester = semester
        self._observers = observers
        self._programs = programs
        self._group = group
        self._comment = comment

    @classmethod
    def from_dict(cls, dikt) -> 'Signature':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Signature of this Signature.  # noqa: E501
        :rtype: Signature
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pi(self) -> str:
        """Gets the pi of this Signature.


        :return: The pi of this Signature.
        :rtype: str
        """
        return self._pi

    @pi.setter
    def pi(self, pi: str):
        """Sets the pi of this Signature.


        :param pi: The pi of this Signature.
        :type pi: str
        """

        self._pi = pi

    @property
    def semester(self) -> str:
        """Gets the semester of this Signature.


        :return: The semester of this Signature.
        :rtype: str
        """
        return self._semester

    @semester.setter
    def semester(self, semester: str):
        """Sets the semester of this Signature.


        :param semester: The semester of this Signature.
        :type semester: str
        """

        self._semester = semester

    @property
    def observers(self) -> List[str]:
        """Gets the observers of this Signature.


        :return: The observers of this Signature.
        :rtype: List[str]
        """
        return self._observers

    @observers.setter
    def observers(self, observers: List[str]):
        """Sets the observers of this Signature.


        :param observers: The observers of this Signature.
        :type observers: List[str]
        """

        self._observers = observers

    @property
    def programs(self) -> List[str]:
        """Gets the programs of this Signature.


        :return: The programs of this Signature.
        :rtype: List[str]
        """
        return self._programs

    @programs.setter
    def programs(self, programs: List[str]):
        """Sets the programs of this Signature.


        :param programs: The programs of this Signature.
        :type programs: List[str]
        """

        self._programs = programs

    @property
    def group(self) -> List[str]:
        """Gets the group of this Signature.


        :return: The group of this Signature.
        :rtype: List[str]
        """
        return self._group

    @group.setter
    def group(self, group: List[str]):
        """Sets the group of this Signature.


        :param group: The group of this Signature.
        :type group: List[str]
        """

        self._group = group

    @property
    def comment(self) -> str:
        """Gets the comment of this Signature.


        :return: The comment of this Signature.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment: str):
        """Sets the comment of this Signature.


        :param comment: The comment of this Signature.
        :type comment: str
        """

        self._comment = comment

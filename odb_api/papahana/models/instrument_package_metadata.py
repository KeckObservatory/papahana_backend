# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from papahana.models.base_model_ import Model
from papahana import util


class InstrumentPackageMetadata(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, ui_name: str=None, version: str=None, instrument: str=None, observing_modes: List[str]=None):  # noqa: E501
        """InstrumentPackageMetadata - a model defined in Swagger

        :param name: The name of this InstrumentPackageMetadata.  # noqa: E501
        :type name: str
        :param ui_name: The ui_name of this InstrumentPackageMetadata.  # noqa: E501
        :type ui_name: str
        :param version: The version of this InstrumentPackageMetadata.  # noqa: E501
        :type version: str
        :param instrument: The instrument of this InstrumentPackageMetadata.  # noqa: E501
        :type instrument: str
        :param observing_modes: The observing_modes of this InstrumentPackageMetadata.  # noqa: E501
        :type observing_modes: List[str]
        """
        self.swagger_types = {
            'name': str,
            'ui_name': str,
            'version': str,
            'instrument': str,
            'observing_modes': List[str]
        }

        self.attribute_map = {
            'name': 'name',
            'ui_name': 'ui_name',
            'version': 'version',
            'instrument': 'instrument',
            'observing_modes': 'observing_modes'
        }
        self._name = name
        self._ui_name = ui_name
        self._version = version
        self._instrument = instrument
        self._observing_modes = observing_modes

    @classmethod
    def from_dict(cls, dikt) -> 'InstrumentPackageMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The InstrumentPackageMetadata of this InstrumentPackageMetadata.  # noqa: E501
        :rtype: InstrumentPackageMetadata
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this InstrumentPackageMetadata.


        :return: The name of this InstrumentPackageMetadata.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this InstrumentPackageMetadata.


        :param name: The name of this InstrumentPackageMetadata.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def ui_name(self) -> str:
        """Gets the ui_name of this InstrumentPackageMetadata.


        :return: The ui_name of this InstrumentPackageMetadata.
        :rtype: str
        """
        return self._ui_name

    @ui_name.setter
    def ui_name(self, ui_name: str):
        """Sets the ui_name of this InstrumentPackageMetadata.


        :param ui_name: The ui_name of this InstrumentPackageMetadata.
        :type ui_name: str
        """
        if ui_name is None:
            raise ValueError("Invalid value for `ui_name`, must not be `None`")  # noqa: E501

        self._ui_name = ui_name

    @property
    def version(self) -> str:
        """Gets the version of this InstrumentPackageMetadata.


        :return: The version of this InstrumentPackageMetadata.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """Sets the version of this InstrumentPackageMetadata.


        :param version: The version of this InstrumentPackageMetadata.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def instrument(self) -> str:
        """Gets the instrument of this InstrumentPackageMetadata.


        :return: The instrument of this InstrumentPackageMetadata.
        :rtype: str
        """
        return self._instrument

    @instrument.setter
    def instrument(self, instrument: str):
        """Sets the instrument of this InstrumentPackageMetadata.


        :param instrument: The instrument of this InstrumentPackageMetadata.
        :type instrument: str
        """
        if instrument is None:
            raise ValueError("Invalid value for `instrument`, must not be `None`")  # noqa: E501

        self._instrument = instrument

    @property
    def observing_modes(self) -> List[str]:
        """Gets the observing_modes of this InstrumentPackageMetadata.


        :return: The observing_modes of this InstrumentPackageMetadata.
        :rtype: List[str]
        """
        return self._observing_modes

    @observing_modes.setter
    def observing_modes(self, observing_modes: List[str]):
        """Sets the observing_modes of this InstrumentPackageMetadata.


        :param observing_modes: The observing_modes of this InstrumentPackageMetadata.
        :type observing_modes: List[str]
        """
        if observing_modes is None:
            raise ValueError("Invalid value for `observing_modes`, must not be `None`")  # noqa: E501

        self._observing_modes = observing_modes

# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from papahana.models.base_model_ import Model
from papahana.models.instrument_enum import InstrumentEnum  # noqa: F401,E501
from papahana import util


class ObservationMetadata(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, ui_name: str=None, instrument: InstrumentEnum=None, template_type: str='science', version: str=None, script: str=None, sequence_number: int=None):  # noqa: E501
        """ObservationMetadata - a model defined in Swagger

        :param name: The name of this ObservationMetadata.  # noqa: E501
        :type name: str
        :param ui_name: The ui_name of this ObservationMetadata.  # noqa: E501
        :type ui_name: str
        :param instrument: The instrument of this ObservationMetadata.  # noqa: E501
        :type instrument: InstrumentEnum
        :param template_type: The template_type of this ObservationMetadata.  # noqa: E501
        :type template_type: str
        :param version: The version of this ObservationMetadata.  # noqa: E501
        :type version: str
        :param script: The script of this ObservationMetadata.  # noqa: E501
        :type script: str
        :param sequence_number: The sequence_number of this ObservationMetadata.  # noqa: E501
        :type sequence_number: int
        """
        self.swagger_types = {
            'name': str,
            'ui_name': str,
            'instrument': InstrumentEnum,
            'template_type': str,
            'version': str,
            'script': str,
            'sequence_number': int
        }

        self.attribute_map = {
            'name': 'name',
            'ui_name': 'ui_name',
            'instrument': 'instrument',
            'template_type': 'template_type',
            'version': 'version',
            'script': 'script',
            'sequence_number': 'sequence_number'
        }
        self._name = name
        self._ui_name = ui_name
        self._instrument = instrument
        self._template_type = template_type
        self._version = version
        self._script = script
        self._sequence_number = sequence_number

    @classmethod
    def from_dict(cls, dikt) -> 'ObservationMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ObservationMetadata of this ObservationMetadata.  # noqa: E501
        :rtype: ObservationMetadata
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this ObservationMetadata.


        :return: The name of this ObservationMetadata.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ObservationMetadata.


        :param name: The name of this ObservationMetadata.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def ui_name(self) -> str:
        """Gets the ui_name of this ObservationMetadata.


        :return: The ui_name of this ObservationMetadata.
        :rtype: str
        """
        return self._ui_name

    @ui_name.setter
    def ui_name(self, ui_name: str):
        """Sets the ui_name of this ObservationMetadata.


        :param ui_name: The ui_name of this ObservationMetadata.
        :type ui_name: str
        """
        if ui_name is None:
            raise ValueError("Invalid value for `ui_name`, must not be `None`")  # noqa: E501

        self._ui_name = ui_name

    @property
    def instrument(self) -> InstrumentEnum:
        """Gets the instrument of this ObservationMetadata.


        :return: The instrument of this ObservationMetadata.
        :rtype: InstrumentEnum
        """
        return self._instrument

    @instrument.setter
    def instrument(self, instrument: InstrumentEnum):
        """Sets the instrument of this ObservationMetadata.


        :param instrument: The instrument of this ObservationMetadata.
        :type instrument: InstrumentEnum
        """
        if instrument is None:
            raise ValueError("Invalid value for `instrument`, must not be `None`")  # noqa: E501

        self._instrument = instrument

    @property
    def template_type(self) -> str:
        """Gets the template_type of this ObservationMetadata.


        :return: The template_type of this ObservationMetadata.
        :rtype: str
        """
        return self._template_type

    @template_type.setter
    def template_type(self, template_type: str):
        """Sets the template_type of this ObservationMetadata.


        :param template_type: The template_type of this ObservationMetadata.
        :type template_type: str
        """
        allowed_values = ["acquisition", "science", "engineering", "calibration"]  # noqa: E501
        if template_type not in allowed_values:
            raise ValueError(
                "Invalid value for `template_type` ({0}), must be one of {1}"
                .format(template_type, allowed_values)
            )

        self._template_type = template_type

    @property
    def version(self) -> str:
        """Gets the version of this ObservationMetadata.


        :return: The version of this ObservationMetadata.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """Sets the version of this ObservationMetadata.


        :param version: The version of this ObservationMetadata.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def script(self) -> str:
        """Gets the script of this ObservationMetadata.


        :return: The script of this ObservationMetadata.
        :rtype: str
        """
        return self._script

    @script.setter
    def script(self, script: str):
        """Sets the script of this ObservationMetadata.


        :param script: The script of this ObservationMetadata.
        :type script: str
        """
        if script is None:
            raise ValueError("Invalid value for `script`, must not be `None`")  # noqa: E501

        self._script = script

    @property
    def sequence_number(self) -> int:
        """Gets the sequence_number of this ObservationMetadata.


        :return: The sequence_number of this ObservationMetadata.
        :rtype: int
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number: int):
        """Sets the sequence_number of this ObservationMetadata.


        :param sequence_number: The sequence_number of this ObservationMetadata.
        :type sequence_number: int
        """
        if sequence_number is None:
            raise ValueError("Invalid value for `sequence_number`, must not be `None`")  # noqa: E501

        self._sequence_number = sequence_number

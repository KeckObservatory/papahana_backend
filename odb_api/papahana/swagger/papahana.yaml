openapi: 3.0.0
info:
  title: Observing Database API
  description: WMKO API interface to the Observing DataBase (ODB)
  contact:
    email: lfuhrman@keck.hawaii.edu
  license:
    name: BSD 3-Clause
    url: https://opensource.org/licenses/BSD-3-Clause
  version: "0.1.0"
servers:
- url: http://localhost:8080/
#tags:
#- name: Instrument
#  externalDocs:
#    description: Find out more
#    url: https://keckobservatory.atlassian.net/wiki/spaces/DSI/pages/808779858/Programmatic+Web+Interfacej
#- name: Semester ID
#  externalDocs:
#    description: Find out more
#    url: https://keckobservatory.atlassian.net/wiki/spaces/DSI/pages/808779858/Programmatic+Web+Interfacej
#- name: Containers
#  externalDocs:
#    description: Find out more
#    url: https://keckobservatory.atlassian.net/wiki/spaces/DSI/pages/808779858/Programmatic+Web+Interfacej
#- name: Templates
#  externalDocs:
#    description: Find out more
#    url: https://keckobservatory.atlassian.net/wiki/spaces/DSI/pages/808779858/Programmatic+Web+Interfacej
#- name: Observation Block
#  externalDocs:
#    description: Find out more
#    url: https://keckobservatory.atlassian.net/wiki/spaces/DSI/pages/808779858/Programmatic+Web+Interfacej

# -------------------------------------------------------------------------------
# Example Path
# -------------------------------------------------------------------------------
#  /example/{required_parameter}/more/:

    # get/post/put/delete
#    get:

      # this tells the generate to put it in the control/observers_controller.py
#      tags:
#        - Observers

#      description: view the list of observers associated with the sem_id (program).  The list will include userâ€™s name,  Keck ID,  and institute.

      # this is the name of the method
#      operationId: observer_view

      # all optional and required parameters have to be defined in the parameter: section
      # the definition tells if it is in the query or path,  if it is optional or required
#      parameters:
#        - $ref: '#/components/parameters/required_parameter'

      # define the response
#      responses:
#        "200":
#          description: On success a TBD text version of the OB is returned.
#          content:
#            application/json:
               # the schema need to be defined in the schema section
#              schema:
#                $ref: '#/components/schemas/ObserverList'
#        "400":
#          description: Invalid Program Semester ID (sem_id).
#        "422":
#          description: Program Semester ID (sem_id) not found.

      # these tell the API where to look for the method,  def example_method
#      x-swagger-router-controller: Observer
#      x-openapi-router-controller: papahana.controllers.observers_controller

paths:
# -------------------------------------------------------------------------------
# Semester ID Section
# -------------------------------------------------------------------------------

  /semesterIds:
    summary: Retrieves all the Semester IDs (sem_ids) associated with an observer.
    get:
      tags:
        - Semester Id
      operationId: sem_id_get
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "422":
          description: Observation ID (Keck ID) not found.
      x-swagger-router-controller: SemesterId
      x-openapi-router-controller: papahana.controllers.semester_id_controller

  /semesterIds/{semester}/semester:
    summary: Retrieves programs (Semester IDs) of a given semester for the
             authenticated observer (Keck ID). The Semester is a required
             parameter,  ie 2020A.
    get:
      tags:
        - Semester Id
      operationId: sem_id_semester_get
      parameters:
        - $ref: '#/components/parameters/semester_path'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "422":
          description: Observation ID (Keck ID) not found.
      x-swagger-router-controller: SemesterId
      x-openapi-router-controller: papahana.controllers.semester_id_controller

  /semesterIds/{sem_id}/ob:
    summary: Retrieves the most recent version of an OB. The Semester ID is a required parameter.
    get:
      tags:
        - Semester Id
      operationId: sem_id_ob_get
      parameters:
        - $ref: '#/components/parameters/sem_id'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ObservationBlock'
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "422":
          description: Observation ID (Keck ID) or Semester ID not found.
      x-swagger-router-controller: SemesterId
      x-openapi-router-controller: papahana.controllers.semester_id_controller

  /semesterIds/{sem_id}/proposal:
    get:
      tags:
        - Semester Id
      description: Retrieves the proposal associated with the program.
                   The Semester ID is a required parameter.
      operationId: sem_id_proposal_get
      parameters:
        - $ref: '#/components/parameters/sem_id'
      responses:
        "200":
          description: returns the pdf or ps file of the proposal.
          content:
            application/pdf:
              schema:
                type: string
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "422":
          description: Observation ID (Keck ID) or Semester ID not found.
      x-swagger-router-controller: SemesterId
      x-openapi-router-controller: papahana.controllers.semester_id_controller

  /semesterIds/{sem_id}/targets:
    get:
      tags:
        - Semester Id
      description: Retrieves all the targets associated with a program (Semester ID).
                   The Semester ID is a required parameter.
      operationId: sem_id_targets_get
      parameters:
        - $ref: '#/components/parameters/sem_id'
      responses:
        "200":
          description: array of targets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Target'
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "422":
          description: Observation ID (Keck ID) or Semester ID not found.
      x-swagger-router-controller: SemesterId
      x-openapi-router-controller: papahana.controllers.semester_id_controller

  /semesterIds/{sem_id}/containers:
    get:
      tags:
        - Containers
        - Semester Id
      description: Retrieves all containers associated with a program.  The Semester ID
                   is a required parameter.
      operationId: sem_id_containers_get
      parameters:
        - $ref: '#/components/parameters/sem_id'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Container'
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "422":
          description: Observation ID (Keck ID) or Semester ID not found.
      x-swagger-router-controller: SemesterId
      x-openapi-router-controller: papahana.controllers.semester_id_controller


  /semesterIds/{sem_id}/ob/metadata:
   get:
      tags:
        - Semester Id
      description: Retrieves all the observation blocks metadata for a given program.  The
                    default is to exclude completed observation blocks.
      operationId: sem_id_ob_metadata
      parameters:
        - $ref: '#/components/parameters/sem_id'
        - $ref: '#/components/parameters/min_ra'
        - $ref: '#/components/parameters/max_ra'
        - $ref: '#/components/parameters/instrument_optional'
        - $ref: '#/components/parameters/ob_priority'
        - $ref: '#/components/parameters/min_priority'
        - $ref: '#/components/parameters/max_priority'
        - $ref: '#/components/parameters/min_duration'
        - $ref: '#/components/parameters/max_duration'
        - $ref: '#/components/parameters/state'
        - $ref: '#/components/parameters/observable'
        - $ref: '#/components/parameters/completed'
        - $ref: '#/components/parameters/container_id_optional'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "422":
          description: Invalid parameter
      x-swagger-router-controller: SemesterId
      x-openapi-router-controller: papahana.controllers.semester_id_controller

  /semesterIds/{sem_id}/ob/targets:
   get:
      tags:
        - Semester Id
      description: Retrieves all the target components associated with a program.
      operationId: sem_id_ob_targets
      parameters:
        - $ref: '#/components/parameters/sem_id'
        - $ref: '#/components/parameters/min_ra'
        - $ref: '#/components/parameters/max_ra'
        - $ref: '#/components/parameters/instrument_optional'
        - $ref: '#/components/parameters/ob_priority'
        - $ref: '#/components/parameters/min_priority'
        - $ref: '#/components/parameters/max_priority'
        - $ref: '#/components/parameters/min_duration'
        - $ref: '#/components/parameters/max_duration'
        - $ref: '#/components/parameters/state'
        - $ref: '#/components/parameters/observable'
        - $ref: '#/components/parameters/completed'
        - $ref: '#/components/parameters/container_id_optional'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "422":
          description: Invalid parameter
      x-swagger-router-controller: SemesterId
      x-openapi-router-controller: papahana.controllers.semester_id_controller

  /semesterIds/{sem_id}/ob/observations:
   get:
      tags:
        - Semester Id
      description: Retrieves all the target components associated with a program.
      operationId: sem_id_ob_observations
      parameters:
        - $ref: '#/components/parameters/sem_id'
        - $ref: '#/components/parameters/min_ra'
        - $ref: '#/components/parameters/max_ra'
        - $ref: '#/components/parameters/instrument_optional'
        - $ref: '#/components/parameters/ob_priority'
        - $ref: '#/components/parameters/min_priority'
        - $ref: '#/components/parameters/max_priority'
        - $ref: '#/components/parameters/min_duration'
        - $ref: '#/components/parameters/max_duration'
        - $ref: '#/components/parameters/state'
        - $ref: '#/components/parameters/observable'
        - $ref: '#/components/parameters/completed'
        - $ref: '#/components/parameters/container_id_optional'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "422":
          description: Invalid parameter
      x-swagger-router-controller: SemesterId
      x-openapi-router-controller: papahana.controllers.semester_id_controller

  /semesterIds/{sem_id}/ob/calibration:
   get:
      tags:
        - Semester Id
      description: Retrieves all the calibration observation blocks in their entirety
                   for a given program.  Excludes completed observation blocks.
      operationId: sem_id_ob_cal
      parameters:
        - $ref: '#/components/parameters/sem_id'
        - $ref: '#/components/parameters/instrument_optional'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "422":
          description: Invalid parameter
      x-swagger-router-controller: SemesterId
      x-openapi-router-controller: papahana.controllers.semester_id_controller

  /semesterIds/{sem_id}/ob/science:
   get:
      tags:
        - Semester Id
      description: Retrieves all the science observation blocks in their entirety for
                   a given program that are observable for the night.  Excludes
                   completed observation blocks.
      operationId: sem_id_ob_sci
      parameters:
        - $ref: '#/components/parameters/sem_id'
        - $ref: '#/components/parameters/min_ra'
        - $ref: '#/components/parameters/max_ra'
        - $ref: '#/components/parameters/instrument_optional'
        - $ref: '#/components/parameters/ob_priority'
        - $ref: '#/components/parameters/min_priority'
        - $ref: '#/components/parameters/max_priority'
        - $ref: '#/components/parameters/min_duration'
        - $ref: '#/components/parameters/max_duration'
        - $ref: '#/components/parameters/state'
        - $ref: '#/components/parameters/observable'
        - $ref: '#/components/parameters/completed'
        - $ref: '#/components/parameters/container_id_optional'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "422":
          description: Invalid parameter
      x-swagger-router-controller: SemesterId
      x-openapi-router-controller: papahana.controllers.semester_id_controller

# -------------------------------------------------------------------------------
# Container Section
# -------------------------------------------------------------------------------

  /containers:
    get:
      tags:
        - Containers
      description: Retrieves a specific container.
      operationId: containers_get
      parameters:
        - $ref: '#/components/parameters/container_id'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Container'
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "422":
          description: Container not found.  Check the Container ID.
      x-swagger-router-controller: Containers
      x-openapi-router-controller: papahana.controllers.containers_controller
    put:
      tags:
        - Containers
      description: Overwrites a container.
      operationId: containers_put
      parameters:
        - $ref: '#/components/parameters/container_id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Container'
        required: true
      responses:
        "204":
          description: OK
        "401":
          description: Unauthorized
        "422":
          description: Container not found.  Check the Container ID.
      x-swagger-router-controller: Containers
      x-openapi-router-controller: papahana.controllers.containers_controller
    post:
      tags:
        - Containers
      description: Creates a container.
      operationId: containers_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Container'
        required: true
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "422":
          description: Container not found.  Check the Container ID.
      x-swagger-router-controller: Containers
      x-openapi-router-controller: papahana.controllers.containers_controller
    delete:
      tags:
        - Containers
      description: Delete container by id.
      operationId: containers_delete
      parameters:
        - $ref: '#/components/parameters/container_id'
      responses:
        "204":
          description: Deleted
        "401":
          description: Unauthorized
        "422":
          description: Container not found.  Check the Container ID.
      x-swagger-router-controller: Containers
      x-openapi-router-controller: papahana.controllers.containers_controller

  /containers/append:
    put:
      tags:
      - Containers
      description: Appends an observation block to a container by id.
      operationId: containers_append_put
      parameters:
        - $ref: '#/components/parameters/container_id'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        "204":
          description: OK
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "422":
          description: Container not found.  Check the Container ID.
      x-swagger-router-controller: Containers
      x-openapi-router-controller: papahana.controllers.containers_controller

  /containers/executionTimes:
    get:
      tags:
      - Containers
      description: Calculate the total execution time of a container
      operationId: containers_execution_times_get
      parameters:
        - $ref: '#/components/parameters/container_id'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: number
                description: miliseconds
                x-content-type: application/json
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "422":
          description: Container not found.  Check the Container ID.
      x-swagger-router-controller: Containers
      x-openapi-router-controller: papahana.controllers.containers_controller

  /containers/items:
    get:
      tags:
      - Containers
      description: Retrieves the ordered list of observing blocks in a container.
      operationId: containers_items_get
      parameters:
        - $ref: '#/components/parameters/container_id'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ObservationBlock'
                x-content-type: application/json
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "422":
          description: Container not found.  Check the Container ID.
      x-swagger-router-controller: Containers
      x-openapi-router-controller: papahana.controllers.containers_controller

  /containers/items/summary:
    get:
      tags:
      - Containers
      description: Retrieves a summary of container information.
      operationId: containers_items_summary_get
      parameters:
        - $ref: '#/components/parameters/container_id'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Container'
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "422":
          description: Container not found.  Check the Container ID.
      x-swagger-router-controller: Containers
      x-openapi-router-controller: papahana.controllers.containers_controller

  /containers/verify:
    get:
      tags:
      - Containers
      description: Request verification of the elements of a container. Sends container
                   summary as a sucessfull response
      operationId: containers_verify_get
      parameters:
        - $ref: '#/components/parameters/container_id'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Container'
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "422":
          description: Container not found.  Check the Container ID.
      x-swagger-router-controller: Containers
      x-openapi-router-controller: papahana.controllers.containers_controller


# -------------------------------------------------------------------------------
# Instrument Packages Section
# -------------------------------------------------------------------------------

  /instrumentPackages/{instrument}:
    get:
      tags:
      - Instrument
      description: Retrieves the available instrument packages for an instrument. The
                   version is optional,  defaults to most recent version.
      operationId: instrument_packages
      parameters:
      - $ref: '#/components/parameters/instrument'
      - $ref: '#/components/parameters/ip_version'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InstrumentPackage'
        "400":
          description: Invalid status value
        "422":
          description: Instrument Package not found
      x-swagger-router-controller: Instrument
      x-openapi-router-controller: papahana.controllers.instrument_controller

  /instrumentPackages/{instrument}/parameters:
    get:
      tags:
      - Instrument
      description: List all template parameters that can be attached to OBs using
                   this instrument package. The version is optional,  the default
                   to most recent version.
      operationId: instrument_packages_parameter
      parameters:
      - $ref: '#/components/parameters/instrument'
      - $ref: '#/components/parameters/ip_version'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstrumentPackage'
        "400":
          description: Invalid status value
        "422":
          description: Instrument Package not found
      x-swagger-router-controller: Instrument
      x-openapi-router-controller: papahana.controllers.instrument_controller

  /instrumentPackages/{instrument}/templates:
    get:
      tags:
      - Instrument
      - Templates
      description: Retrieves all the specified instrument package templates.
                   The version and template name are optional.  The version
                   defaults to most recent,  and when name is not specified
                   all templates are returned.
      operationId: instrument_packages_template
      parameters:
      - $ref: '#/components/parameters/instrument'
      - $ref: '#/components/parameters/ip_version'
      - $ref: '#/components/parameters/template_name'
      - $ref: '#/components/parameters/parameter_order'

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstrumentPackage'
        "400":
          description: Invalid status value
        "422":
          description: Instrument Package not found
      x-swagger-router-controller: Instrument
      x-openapi-router-controller: papahana.controllers.instrument_controller

  /instrumentPackages/{instrument}/templates/metadata:
    get:
      tags:
      - Instrument
      - Templates
      description: Retrieves the specified instrument package template metadata.
                   The Instrument Package version and template name are optional.
                   The version defaults to the most recent instrument package version,
                   and when name is not specified all templates are returned.
      operationId: instrument_packages_template_metadata
      parameters:
      - $ref: '#/components/parameters/instrument'
      - $ref: '#/components/parameters/ip_version'
      - $ref: '#/components/parameters/template_name'

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstrumentPackage'
        "400":
          description: Invalid status value
        "422":
          description: Instrument Package not found
      x-swagger-router-controller: Instrument
      x-openapi-router-controller: papahana.controllers.instrument_controller

  /instrumentPackages/{instrument}/scripts:
    get:
      tags:
        - Instrument
        - Templates
      description:  Retrieves all the scripts associated with the instrument package.
                    The Instrument Package version is optional,  the default to
                    most recent  Instrument Package version.
      operationId: instrument_packages_scripts
      parameters:
        - $ref: '#/components/parameters/instrument'
        - $ref: '#/components/parameters/ip_version'
        - $ref: '#/components/parameters/script_name'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstrumentPackage'
        "400":
          description: Invalid status value
        "422":
          description: Instrument Package not found
      x-swagger-router-controller: Instrument
      x-openapi-router-controller: papahana.controllers.instrument_controller

# -------------------------------------------------------------------------------
# Observation Block Section
# -------------------------------------------------------------------------------
  /obsBlocks:
    get:
      tags:
      - Observation Block
      description: Retrieves the Observation Block (OB) by OB ID.  The returned OB is
                   in JSON format.
      operationId: ob_get
      parameters:
        - $ref: '#/components/parameters/ob_id'
      responses:
        "200":
          description: On success gets a new OB.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservationBlock'
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "422":
          description: Observation Block not found with provided OB ID.
      x-swagger-router-controller: Observation
      x-openapi-router-controller: papahana.controllers.observation_block_controller
    put:
      tags:
      - Observation Block
      description: Updates the observation block with the JSON formatted OB provided.
      operationId: ob_put
      parameters:
        - $ref: '#/components/parameters/ob_id'
      requestBody:
        description: Observation block replacing ob_id.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObservationBlock'
        required: true
      responses:
        "204":
          description: On a success replaces the given OB with the updated OB.
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "422":
          description: Observation Block not found with provided OB ID.
      x-swagger-router-controller: Observation
      x-openapi-router-controller: papahana.controllers.observation_block_controller
    post:
      tags:
      - Observation Block
      description: Inserts an Observation Block.
      operationId: ob_post
      requestBody:
        description: Observation block to be added.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObservationBlock'
        required: true
      responses:
        "200":
          description: On a success inserts new OB.
          content:
            application/json:
              schema:
                type: string
                description: id of new ob.
                x-content-type: application/json
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "422":
          description: Observation Block not found with provided OB ID.
      x-swagger-router-controller: Observation
      x-openapi-router-controller: papahana.controllers.observation_block_controller
    delete:
      tags:
      - Observation Block
      description: Removes the observation block.
      operationId: ob_delete
      parameters:
        - $ref: '#/components/parameters/ob_id'
      responses:
        "204":
          description: On a success removes given OB from the database.
        "400":
          description: Invalid status value
        "422":
          description: Observation Block not found with provided OB ID.
      x-swagger-router-controller: Observation
      x-openapi-router-controller: papahana.controllers.observation_block_controller

  /obsBlocks/previousVersion:
    get:
      tags:
      - Observation Block
      description: Retrieves the last saved version of an OB.
      operationId: ob_previous_version
      parameters:
        - $ref: '#/components/parameters/ob_id'
      responses:
        "200":
          description: On success gets a new OB.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservationBlock'
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "422":
          description: Observation Block not found with provided OB ID.
      x-swagger-router-controller: Observation
      x-openapi-router-controller: papahana.controllers.observation_block_controller

  /obsBlocks/revisions:
    get:
      tags:
      - Observation Block
      description: Retrieves the last ten revisions,  unless the number of
                   revisions is specified.
      operationId: ob_revisions
      parameters:
        - $ref: '#/components/parameters/ob_id'
        - $ref: '#/components/parameters/revision_n'
      responses:
        "200":
          description: On success gets a new OB.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ObservationBlock'
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "422":
          description: Observation Block not found with provided OB ID.
      x-swagger-router-controller: Observation
      x-openapi-router-controller: papahana.controllers.observation_block_controller

  /obsBlocks/revisions/{revision_index}:
    get:
      tags:
      - Observation Block
      description: Retrieves the nth (revision_index) revision.
      operationId: ob_revision_index
      parameters:
        - $ref: '#/components/parameters/ob_id'
        - $ref: '#/components/parameters/revision_index'
      responses:
        "200":
          description: On success gets a new OB.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservationBlock'
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "422":
          description: Observation Block not found with provided OB ID.
      x-swagger-router-controller: Observation
      x-openapi-router-controller: papahana.controllers.observation_block_controller

#
#      /obsBlocks/state/{state}
#      /obsBlocks/scripts
#      /obsBlocks/executionTimeRemaining

  /obsBlocks/observations:
    get:
      tags:
        - Observation Block
      description: Retrieves the list of templates associated with the
                   Observation Block.
      operationId: ob_observations_get
      parameters:
        - $ref: '#/components/parameters/ob_id'
      responses:
        "200":
          description: Returns the list of templates associated with the OB.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TemplateSchema'
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "422":
          description: Observation Block not found with provided OB ID.
      x-swagger-router-controller: Observation
      x-openapi-router-controller: papahana.controllers.observation_block_controller
    post:
      tags:
        - Observation Block
      description: Creates the list of templates associated with the OB.
      operationId: ob_sequence_post
      parameters:
        - $ref: '#/components/parameters/ob_id'
        - $ref: '#/components/parameters/template_type'
      requestBody:
        content:
          application/json:
            schema:
                oneOf:
                  - $ref: '#/components/schemas/TemplateSchema'
                  - type: array
                    items:
                      $ref: '#/components/schemas/TemplateSchema'
        required: true
      responses:
        "200":
          description: On success inserts a new list of templates associated with the OB.
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "422":
          description: Observation Block not found with provided OB ID.
      x-swagger-router-controller: Observation
      x-openapi-router-controller: papahana.controllers.observation_block_controller
    put:
      tags:
        - Observation Block
      description: Updates the list of templates associated with the OB.
      operationId: ob_sequence_put
      parameters:
        - $ref: '#/components/parameters/ob_id'
        - $ref: '#/components/parameters/template_type'
      requestBody:
        content:
          application/json:
            schema:
                oneOf:
                  - $ref: '#/components/schemas/TemplateSchema'
                  - type: array
                    items:
                      $ref: '#/components/schemas/TemplateSchema'

        required: true
      responses:
        "204":
          description: On success replaces the given templates with new list of templates.
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "422":
          description: Observation Block not found with provided OB ID.
      x-swagger-router-controller: Observation
      x-openapi-router-controller: papahana.controllers.observation_block_controller

  /obsBlocks/observations/id:
    get:
      tags:
        - Observation Block
      description: Retrieves the specified observation within the Observation Block.
      operationId: ob_observations_id_get
      parameters:
        - $ref: '#/components/parameters/ob_id'
        - $ref: '#/components/parameters/sequence_number'
      responses:
        "200":
          description: Retrieves and returns the Template of the observing block being requested
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateSchema'
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "422":
          description: Observation Block not found with provided OB ID.
      x-swagger-router-controller: Observation
      x-openapi-router-controller: papahana.controllers.observation_block_controller
    put:
      tags:
        - Observation Block
      description: Updates the specified observation within the Observation Block.
      operationId: ob_sequence_id_put
      parameters:
        - $ref: '#/components/parameters/ob_id'
        - $ref: '#/components/parameters/sequence_number'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TemplateSchema'
        required: true
      responses:
        "204":
          description: replaces the given Template within the OB with Template of id=sequence_number
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "422":
          description: Observation Block not found with provided OB ID.
      x-swagger-router-controller: Observation
      x-openapi-router-controller: papahana.controllers.observation_block_controller
    delete:
      tags:
        - Observation Block
      description: Removes the specified observation within the OB.
      operationId: ob_sequence_id_delete
      parameters:
        - $ref: '#/components/parameters/ob_id'
        - $ref: '#/components/parameters/sequence_number'
      responses:
        "204":
          description: removes the observation from the OB
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "422":
          description: Observation Block not found with provided OB ID.
      x-swagger-router-controller: Observation
      x-openapi-router-controller: papahana.controllers.observation_block_controller

  /obsBlocks/sequence/duplicate:
    post:
      tags:
        - Observation Block
      description: Generate a new copy of the sequence and add it to the list of
                   sequences in the Observation Block.
      operationId: ob_sequence_duplicate
      parameters:
        - $ref: '#/components/parameters/ob_id'
        - $ref: '#/components/parameters/sequence_number'
      responses:
        "200":
          description: returns a copy of the Template within the OB.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateSchema'
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "404":
          description: Observation Block not found
      x-swagger-router-controller: Observation
      x-openapi-router-controller: papahana.controllers.observation_block_controller

  # TODO low priority
  /obsBlocks/completelyFilledIn:
    get:
      tags:
        - Observation Block
      description: Verify that the required parameters have been filled in.
      operationId: ob_completely_filled
      parameters:
        - $ref: '#/components/parameters/ob_id'
      responses:
        "200":
          description: On success returns True.
          content:
            application/json:
              schema:
                type: boolean
                x-content-type: application/json
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "422":
          description: Observation Block not found
      x-swagger-router-controller: Observation
      x-openapi-router-controller: papahana.controllers.observation_block_controller

 # TODO low-priority
  /obsBlocks/supplementFiles:
    get:
      tags:
        - Observation Block
      description: Retrieves a list of files associated with the Observation Block.
      operationId: ob_sequence_supplement
      parameters:
        - $ref: '#/components/parameters/ob_id'
      responses:
        "200":
          description: On success gets list of files associated with the OB.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                x-content-type: application/json
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "422":
          description: Observation Block not found with provided OB ID.
      x-swagger-router-controller: Observation
      x-openapi-router-controller: papahana.controllers.observation_block_controller

  /obsBlocks/timeConstraints:
    get:
      tags:
        - Observation Block
      description: Retrieves the time constraints (from, to).
      operationId: ob_time_constraint_get
      parameters:
        - $ref: '#/components/parameters/ob_id'
      responses:
        "200":
          description: On success retrieves a list of existing time constraint(s) of an OB.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DateSchema'
                x-content-type: application/json
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "422":
          description: Observation Block not found
      x-swagger-router-controller: Observation
      x-openapi-router-controller: papahana.controllers.observation_block_controller
    put:
      tags:
        - Observation Block
      description: Creates / Replaces the time constraints (from, to) within the
                   Observation Block.
      operationId: ob_time_constraint_put
      parameters:
        - $ref: '#/components/parameters/ob_id'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/DateSchema'
        required: true
      responses:
        "204":
          description: On success updates an existing time constraint(s) of an OB.
        "400":
          description: Invalid input time constraints -- input must be an array.
        "401":
          description: Unauthorized
        "422":
          description: Observation Block not found with provided OB ID.
      x-swagger-router-controller: Observation
      x-openapi-router-controller: papahana.controllers.observation_block_controller

  # TODO check this one over
  /obsBlocks/schedule:
    get:
      tags:
        - Observation Block
      description: Retrieves scheduling information for the Observation Block.
      operationId: ob_schedule_get
      parameters:
        - $ref: '#/components/parameters/ob_id'
      responses:
        "200":
          description: On success retrieves the existing ob schedule,  a list of dates.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                x-content-type: application/json
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "422":
          description: Observation Block not found with provided OB ID.
      x-swagger-router-controller: Observation
      x-openapi-router-controller: papahana.controllers.observation_block_controller
    put:
      tags:
        - Observation Block
      description: On success updates an existing ob schedule.
      operationId: ob_schedule_put
      parameters:
        - $ref: '#/components/parameters/ob_id'
      responses:
        "200":
          description: On success updates an existing time constraint(s) of an OB.
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "422":
          description: Observation Block not found with provided OB ID.
      x-swagger-router-controller: Observation
      x-openapi-router-controller: papahana.controllers.observation_block_controller

  /obsBlocks/executions:
    get:
      tags:
        - Observation Block
      description: Retrieves the list of execution attempts for a specific
                   Observation Block.
      operationId: ob_executions
      parameters:
        - $ref: '#/components/parameters/ob_id'
      responses:
        "200":
          description: On success retrieves a list of execution attempts of an OB.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DateSchema'
                x-content-type: application/json
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "422":
          description: Observation Block not found with provided OB ID.
      x-swagger-router-controller: Observation
      x-openapi-router-controller: papahana.controllers.observation_block_controller

  /obsBlocks/executionTime:
    get:
      tags:
        - Observation Block
      description: Calculates the remaining execution time for an Observation Block.
                   The calculated value has units = minutes.
      operationId: ob_execution_time
      parameters:
        - $ref: '#/components/parameters/ob_id'
      responses:
        "200":
          description: On success returns an estimated execution time for an OB in minutes.
          content:
            application/json:
              schema:
                type: number
                x-content-type: application/json
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "422":
          description: Observation Block not found with provided OB ID.
      x-swagger-router-controller: Observation
      x-openapi-router-controller: papahana.controllers.observation_block_controller

  /obsBlocks/duplicate:
    post:
      tags:
        - Observation Block
      description: Duplicate the OB, default is create the new Observation Block with
                   the current semId.
      operationId: ob_duplicate
      parameters:
        - $ref: '#/components/parameters/ob_id'
        - $ref: '#/components/parameters/sem_id_not_required'
      responses:
        "200":
          description: On success a new OB is generated, with a new unique ID. If
                       needed the OB is associated with a new semester.
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "422":
          description: Observation Block not found with provided OB ID.
      x-swagger-router-controller: Observation
      x-openapi-router-controller: papahana.controllers.observation_block_controller

  # low-priority
  /obsBlocks/upgrade:
    post:
      tags:
        - Observation Block
      description: Adapt a current Observation Block to use a more recent version
                   of an Instrument Package.  This can be used when a new version
                   of an Instrument Package becomes available. The default is
                   to use the current semId.
      operationId: ob_upgrade
      parameters:
        - $ref: '#/components/parameters/ob_id'
        - $ref: '#/components/parameters/sem_id_not_required'
      responses:
        "200":
          description: On success the new version of the OB is returned, with
                       the same ID.  If the upgrade fails, an error code is
                       generated and the Observation Block remains unchanged.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservationBlock'
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "422":
          description: Observation Block not found with provided OB ID.
      x-swagger-router-controller: Observation
      x-openapi-router-controller: papahana.controllers.observation_block_controller

  # status routes
  /obsBlocks/status/{status_field}/update:
    get:
      tags:
        - Observation Block
      description: update the status of the observation block.  It is meant to be
                   used by the execution engine to record the completion status of
                   the Observation Block.
      operationId: ob_status_update
      parameters:
        - $ref: '#/components/parameters/ob_id'
        - $ref: '#/components/parameters/status_field'
        - $ref: '#/components/parameters/new_status'
      responses:
        "200":
          description: On success the new status of updated field is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusSubset'
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "422":
          description: Observation Block not found with provided OB ID.
      x-swagger-router-controller: Observation
      x-openapi-router-controller: papahana.controllers.observation_block_controller

  /obsBlocks/status:
    get:
      tags:
        - Observation Block
      description: retrieve the completion status of the observation block.  Optionally
                   a field can be added to return only a subset of the status.
      operationId: ob_status_get
      parameters:
        - $ref: '#/components/parameters/ob_id'
        - $ref: '#/components/parameters/status_field_optional'
      responses:
        "200":
          description: On success the json formatted status is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusSubset'
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "422":
          description: Observation Block not found with provided OB ID.
      x-swagger-router-controller: Observation
      x-openapi-router-controller: papahana.controllers.observation_block_controller


# -------------------------------------------------------------------------------
# observer section
# -------------------------------------------------------------------------------

  /observers/semesterIds:
    get:
      tags:
        - Observers
      description: View the list of semester IDs (programs) that the
                   observer is associated with.
      operationId: observer_semid
      responses:
        "200":
          description: On success a JSON formatted list of Semester IDs of
                       the programs associated with the Observer ID are returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObserverList'
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "422":
          description: Keck ID is not associated with any programs.
      x-swagger-router-controller: Observer
      x-openapi-router-controller: papahana.controllers.observers_controller

  /observers/{sem_id}/view:
    get:
      tags:
        - Observers
      description: View the list of observers associated with the sem_id
                   (program).  The list will be the users' Keck ID
      operationId: observer_view
      parameters:
        - $ref: '#/components/parameters/sem_id'
      responses:
        "200":
          description: On success a JSON formatted list of Keck IDs of
                       the observers associated with the Semester ID are returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObserverList'
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "422":
          description: Program Semester ID (sem_id) not found.
      x-swagger-router-controller: Observer
      x-openapi-router-controller: papahana.controllers.observers_controller

  /observers/apikey:
    get:
      tags:
        - Observers
      description: View the apikey for the autheticated observer.  Requires
                   the browser to be authenticated with the Keck Observatory login.
      operationId: observer_apikey
      responses:
        "200":
          description: On success a JSON formatted API KEY and Encrypted Keck
                       ID are returned.  The two cookies can be used to
                       authenticate when calling the API directly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apikey'
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "422":
          description: Program Semester ID (sem_id) not found.
      x-swagger-router-controller: Observer
      x-openapi-router-controller: papahana.controllers.observers_controller

  /observers/keckid/{api_key}:
    get:
      tags:
        - Observers
      description: Get the Keck ID associated with the API Key.  The API Key is a
                   required parameter..
      operationId: observer_keckid
      parameters:
        - $ref: '#/components/parameters/api_key'
      responses:
        "200":
          description: Returns the associated observer (Keck) ID for the API key.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apikey'
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized
        "422":
          description: Program Semester ID (sem_id) not found.
      x-swagger-router-controller: Observer
      x-openapi-router-controller: papahana.controllers.observers_controller

#  /observers/keckid/update_cookie:
#    get:
#      tags:
#        - Observers
#      description: Update the API Key Cookie
#      operationId: update_cookie
#      parameters:
#        - $ref: '#/components/parameters/api_key'
#      responses:
#        "200":
#          description: Returns the associated observer (Keck) ID for the API key.
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/apikey'
#        "400":
#          description: Invalid status value
#        "401":
#          description: Unauthorized
#        "422":
#          description: Program Semester ID (sem_id) not found.
#      x-swagger-router-controller: Observer
#      x-openapi-router-controller: papahana.controllers.observers_controller

#  /observers/{sem_id}/add/{keck_id}:
#    get:
#      tags:
#        - Observers
#      description: allow access to a program for an observer by Keck ID.
#      operationId: observer_add
#      parameters:
#        - $ref: '#/components/parameters/sem_id'
#        - $ref: '#/components/parameters/keck_id'
#      responses:
#        "200":
#          description: On success the updated observer list is returned.
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/ObserverList'
#        "400":
#          description: Invalid status value
#        "401":
#          description: Unauthorized
#        "422":
#          description: Program Semester ID (sem_id) not found.
#      x-swagger-router-controller: Observer
#      x-openapi-router-controller: papahana.controllers.observers_controller
#  /observers/{sem_id}/remove/{keck_id}:
#    get:
#      tags:
#        - Observers
#      description: remove access to a program for an observer by Keck ID.
#      operationId: observer_remove
#      parameters:
#        - $ref: '#/components/parameters/sem_id'
#        - $ref: '#/components/parameters/keck_id'
#      responses:
#        "200":
#          description: On success the updated observer list is returned.
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/ObserverList'
#        "400":
#          description: Invalid status value
#        "401":
#          description: Unauthorized
#        "422":
#          description: Program Semester ID (sem_id) not found.
#      x-swagger-router-controller: Observer
#      x-openapi-router-controller: papahana.controllers.observers_controller


security:
  - ApiKeyAuth: []     # use the same name as under securitySchemes

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: cookie
      name: ODB-API-KEY
      x-apikeyInfoFunc: papahana.controllers.authorization_controller.check_apikey_auth

  parameters:

    api_key:
      name: api_key
      in: path
      description: The API key.
      required: true
      style: simple
      explode: true
      schema:
        type: integer
      example: 0456976544

    container_id:
      name: container_id
      in: query
      description: ObjectId of the container identifier.
      required: true
      explode: true
      schema:
        type: string
      example: 621ffdb8aa42780c3071a651

    container_id_optional:
      name: container_id
      in: query
      description: ObjectId of the container identifier.
      required: false
      explode: false
      schema:
        type: string
      example: 621ffdb8aa42780c3071a651

    completed:
      name: completed
      in: query
      description: return results that are completed.  The default is false (0),
        use completed=1 for only OBs that are observable.
      required: false
      style: form
      explode: false
      schema:
        type: boolean

# TODO used with the 'remove' and 'add' observer routes.
#    keck_id:
#      name: keck_id
#      in: path
#      description: Observer Keck ID.
#      required: true
#      style: simple
#      explode: true
#      schema:
#        type: integer
#      example: 0456

    instrument:
      name: instrument
      in: path
      description: instrument used to make observation
      required: true
      style: simple
      explode: false
      schema:
        $ref: '#/components/schemas/InstrumentEnum'
      example: KCWI

    instrument_optional:
      name: instrument
      in: query
      description: restrict results to a specific Instrument
      style: form
      explode: false
      schema:
        $ref: '#/components/schemas/InstrumentEnum'
      required: false
      example: "KCWI"

    ip_version:
      name: ip_version
      in: query
      description: ip version description here
      required: false
      style: form
      explode: false
      schema:
        type: string
      example: 0.1.0

    max_duration:
      name: max_duration
      in: query
      description: only return results that have a duration less than or equal to the max_duration.  The
        duration unit is minutes.
      required: false
      style: form
      explode: false
      schema:
        type: number

    max_priority:
      name: max_priority
      in: query
      description:  only return results with priority less than to max.
      required: false
      style: form
      explode: false
      schema:
        type: integer

    max_ra:
      name: max_ra
      in: query
      description: the maximum right ascension
      style: form
      explode: true
      schema:
        $ref: '#/components/schemas/RASchema'
      required: false
      example: "12:30:00.0"

    min_duration:
      name: min_duration
      in: query
      description: only return results that have a duration greater than or equal to the min_duration.
                   The duration unit is minutes.
      required: false
      style: form
      explode: false
      schema:
        type: number

    min_priority:
      name: min_priority
      in: query
      description: only return results with priority greater than or equal to minimum.
      required: false
      style: form
      explode: false
      schema:
        type: integer

    min_ra:
      name: min_ra
      in: query
      description: the minimum right ascension
      style: form
      explode: true
      schema:
        $ref: '#/components/schemas/RASchema'
      required: false
      example: "12:30:00.0"

    ob_priority:
      name: ob_priority
      in: query
      description: return results with a given priority.
      required: false
      style: form
      explode: false
      schema:
        type: integer

    ob_id:
      name: ob_id
      in: query
      description: observation block ObjectId
      required: true
      style: form
      explode: true
      schema:
        type: string
      example: 621ffc2853e6386db4116fe6

    observable:
      name: observable
      in: query
      description: only return results that are observable for current UT to sunrise.  The duration is
        not taken into consideration. Default is false (0),  use observable=1 for only OBs
        that are observable.
      required: false
      style: form
      explode: false
      schema:
        type: boolean

    revision_n:
      name: revision_n
      in: query
      description: The number of revisions to return
      required: false
      style: form
      explode: false
      schema:
        type: integer
      example: 5

    revision_index:
      name: revision_index
      in: path
      description: The index of the single revision to return.
      required: true
      style: simple
      explode: false
      schema:
        type: integer
      example: 7

    script_name:
      name: script_name
      in: query
      description: the name of the script to retrieve
      required: false
      style: form
      explode: false
      schema:
        type: string
      example: KCWI_ifu_sci_stare

    sem_id:
      name: sem_id
      in: path
      description: semester id
      required: true
      style: simple
      explode: true
      schema:
        $ref: '#/components/schemas/SemIdSchema'
      example: 2021A_U456

    sem_id_not_required:
      in: query
      name: sem_id
      description: program id including semester
      style: form
      explode: true
      schema:
        $ref: '#/components/schemas/SemIdSchema'
      required: false
      example: 2021A_U456

    semester:
      in: query
      name: semester
      description: semester
      style: form
      explode: true
      schema:
        type: string
        pattern: '^\d{4}[AB]$'
      required: false
      example: 2021A

    semester_path:
      name: semester
      in: path
      description: semester id
      required: true
      style: simple
      explode: true
      schema:
        type: string
        pattern: '^\d{4}[AB]$'
      example: 2021A

    sequence_number:
      name: sequence_number
      in: query
      description: The index of the sequence within the OB.
      required: true
      style: form
      explode: false
      schema:
        type: integer
      example: 1

    state:
      name: state
      in: query
      description: return OBs of a certain state,  the possible states are defined in â€˜Defined Typesâ€™.
      required: false
      style: form
      explode: false
      schema:
        type: string

    status_field:
      name: status_field
      in: path
      description: The completion status field to update
      required: true
      style: simple
      explode: true
      schema:
        type: string
        enum:
          - state
          - current_seq
          - current_step
          - current_exp_det1
          - current_exp_det2

    status_field_optional:
      name: status_field
      in: query
      description: The completion status field to update
      required: false
      style: form
      explode: false
      schema:
        type: string
        enum:
          - state
          - current_seq
          - current_step
          - current_exp_det1
          - current_exp_det2

    new_status:
      name: new_status
      in: query
      description: The new status value.
      required: true
      style: form
      explode: false
      schema:
        type: integer
      example: 1

    template_name:
      name: template_name
      in: query
      description: template name description goes here
      required: false
      style: form
      explode: false
      schema:
        type: string
      example: "KCWI_ifu_sci_stare"

    parameter_order:
      name: parameter_order
      in: query
      description: Return the template with parameter order
      required: false
      style: form
      explode: false
      schema:
        type: boolean
      example: True

    template_type:
      in: query
      name: template_type
      description: A string to indicate template,  possible values - acquisition, science,
                  engineering, calibration.
      required: true
      explode: true
      schema:
        type: string
        enum:
        - acquisition
        - Acquisition
        - science
        - Science
        - engineering
        - Engineering
        - calibration
        - Calibration
      example: science

  schemas:
    apikey:
      type: string

    Container:
      required:
        - name
        - sem_id
        - observation_blocks
      type: object
      properties:
        name:
          type: string
        sem_id:
          $ref: '#/components/schemas/SemIdSchema'
        observation_blocks:
          type: array
          items:
            type: string
          default: []
        comment:
          type: string
          default: ""

    ObservationBlock:
      required:
        - metadata
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/ObsBlockMetadata'
        target:
          $ref: '#/components/schemas/Target'
        acquisition:
          $ref: '#/components/schemas/Acquisition'
        common_parameters:
          $ref: '#/components/schemas/CommonParameters'
        observations:
          type: array
          items:
            $ref: '#/components/schemas/TemplateSchema'
        associations:
          type: array
          items:
            type: string
        status:
          $ref: '#/components/schemas/Status'
        time_constraints:
          type: array
          items:
            $ref: '#/components/schemas/DateSchema'
        comment:
          type: string
          example:
            Hello Observation Block.

    ObsBlockMetadata:
      required:
        - name
        - version
        - priority
        - ob_type
        - pi_id
        - sem_id
        - instrument
      type: object
      properties:
        name:
          type: string
        version:
          type: string
#          ref: '#/components/schemas/VersionSchema'
        ob_type:
          $ref: '#/components/schemas/OBType'
#          type: string
#          enum:
#            - science
#            - calibration
#            - engineering
        priority:
          type: integer
        pi_id:
          type: integer
        sem_id:
          $ref: '#/components/schemas/SemIdSchema'
        instrument:
          $ref: '#/components/schemas/InstrumentEnum'
        comment:
          type: string
          default: ""
      example:
        name: standard stars
        version: 0.1.1
        priority: 20
        ob_type: science
        pi_id: 7766
        sem_id: 2021A_U046
        instrument: KCWI
        comment: My OB Metadata

    ScienceTemplate:
      required:
        - metadata
        - parameters
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/ObservationMetadata'
        parameters:
          $ref: '#/components/schemas/ScienceParameters'

    CalEngTemplate:
      required:
        - metadata
        - parameters
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/ObservationMetadata'
        parameters:
          $ref: '#/components/schemas/CalEngParameters'

    CommonParameters:
      required:
        - metadata
# TODO this will have to validate for each instrument
#        - instrument_parameters
#        - detector_parameters
#        - tcs_config
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/CommonParametersMetadata'
#        instrument_parameters:
#          type: string
#        detector_parameters:
#          type: string
#        tcs_config:
#          type: string

    CommonParametersMetadata:
      required:
        - name
        - ui_name
        - instrument
        - template_type
        - version
      type: object
      properties:
        name:
          type: string
        ui_name:
          type: string
        instrument:
          type: string
        template_type:
          type: string
        version:
          type: string
#          ref: '#/components/schemas/VersionSchema'

    Acquisition:
      required:
      - metadata
      - parameters
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/ObservationMetadata'
        parameters:
          $ref: '#/components/schemas/AcquisitionParameters'

    ObservationMetadata:
      required:
        - name
        - ui_name
        - instrument
        - version
        - script
        - sequence_number
        - template_type
      type: object
      properties:
        name:
          type: string
        ui_name:
          type: string
        instrument:
          $ref: '#/components/schemas/InstrumentEnum'
        template_type:
          type: string
          enum:
            - "acquisition"
            - "science"
            - "engineering"
            - "calibration"
          default: "science"
        version:
          type: string
#          ref: '#/components/schemas/VersionSchema'
        script:
          type: string
        sequence_number:
          type: integer
#      example:
#        name: KCWI_ifu_acq_offsetStar
#        ui_name: KCWI direct
#        instrument: KCWI
#        template_type: acquisition
#        version: 0.1.1
#        script: KCWI_ifu_acq_offsetStar
#        sequence_number: 1

    AcquisitionParameters:
      required:
        - tcs_coord_po
      type: object
      properties:
        tcs_coord_po:
          type: string

    ScienceParameters:
      required:
        - det1_exp_time
        - det1_exp_number
      type: object
      properties:
        det1_exp_time:
          type: number
        det1_exp_number:
          type: integer
        det2_exp_time:
          type: number
        det2_exp_number:
          type: integer
        seq_dither_number:
          type: integer
        seq_dither_pattern:
          type: object
          properties:
            seq_dither_slitoffset:
              type: number
            seq_dither_ra_offset:
              type: number
            seq_dither_dec_offset:
              type: number
            seq_dither_position:
              type: string
              enum:
                - T
                - S
                - O
            seq_dither_guided:
              type: boolean

    CalEngParameters:
      required:
        - det1_exp_time
        - det1_exp_number
      type: object
      properties:
        det1_exp_time:
          type: number
        det1_exp_number:
          type: integer
        det2_exp_time:
          type: number
        det2_exp_number:
          type: integer

    # TODO add IP template description
    InstrumentPackage:
      required:
        - metadata
        - optical_parameters
        - guider
        - configurable_elements
        - pointing_origins
        - template_list
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/InstrumentPackageMetadata'
        optical_parameters:
          type: object
        guider:
          type: object
        configurable_elements:
          type: string
        pointing_origins:
          type: array
          items:
            type: string
        template_list:
          type: array
          items:
            type: string

    InstrumentPackageMetadata:
      required:
        - name
        - ui_name
        - version
        - instrument
        - observing_modes
      type: object
      properties:
        name:
          type: string
        ui_name:
          type: string
        version:
          type: string
        instrument:
          type: string
        observing_modes:
          type: array
          items:
            type: string

    # TODO add observer list schema
    ObserverList:
      description: Observer List description goes here

    Target:
      required:
      - metadata
      - parameters
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/TargetMetadata'
        parameters:
          $ref: '#/components/schemas/TargetParameters'

    TargetMetadata:
      required:
        - name
        - ui_name
        - template_type
        - version
      type: object
      properties:
        name:
          type: string
        ui_name:
          type: string
        template_type:
          type: string
          enum:
            - "target"
          default: "target"
        version:
          type: string
#          ref: '#/components/schemas/VersionSchema'
      example:
        name: multi_object_target
        ui_name: Multi-Object Spectroscopy Target
        template_type: target
        version: 0.1.1

    TargetParameters:
      required:
        - target_info_name
        - target_coord_ra
        - target_coord_dec
      type: object
      properties:
        target_info_name:
          type: string
        target_coord_ra:
          $ref: '#/components/schemas/RASchema'
        target_coord_dec:
          $ref: '#/components/schemas/DecSchema'
        rot_cfg_pa:
          type: number
        target_coord_pm_ra:
          type: number
        target_coord_pm_dec:
          type: number
        target_coord_epoch:
          type: string
        target_coord_frame:
          type: string
        seq_constraint_obstime:
          $ref: '#/components/schemas/DateSchema'
        target_info_magnitude:
          type: object
          properties:
            target_info_band:
              type: string
            target_info_mag:
              type: number
        target_info_comment:
          type:
            string
      example:
        target_info_name: super bright star
        target_coord_ra: 23:55:05
        target_coord_dec: -02:13:50

    StatusSubset:
      anyOf:
          - $ref: '#/components/schemas/Status'
          - $ref: '#/components/schemas/StatusField'

    Status:
      required:
        - state
        - current_seq
        - current_step
        - current_exp_det1
        - current_exp_det2
        - executions
        - deleted
      type: object
      properties:
        state:
          type: integer
          default: 0
        current_seq:
          type: integer
          default: 0
        current_step:
          type: integer
          default: 0
        current_exp_det1:
          type: integer
          default: 0
        current_exp_det2:
          type: integer
          default: 0
        executions:
          type: array
          items:
            $ref: '#/components/schemas/DateSchema'
          default: []
        deleted:
          type: boolean
          default: false

    StatusField:
      type: object
      properties:
        state:
          type: integer
          default: 0
        current_seq:
          type: integer
          default: 0
        current_step:
          type: integer
          default: 0
        current_exp_det1:
          type: integer
          default: 0
        current_exp_det2:
          type: integer
          default: 0

    Magnitude:
      required:
      - band
      - magnitude
      type: object
      properties:
        band:
          type: string
        magnitude:
          type: number
      example:
        magnitude: 14.7
        band: K

    OBType:
      type: string
      oneOf:
        - pattern: '^[Ss][Cc][Ii][Ee][Nn][Cc][Ee]$'
        - pattern: '^[Ee][Nn][Gg][Ii][Nn][Ee][Ee][Rr][Ii][Nn][Gg]$'
        - pattern: '^[Cc][Aa][Ll][Ii][Bb][Rr][Aa][Tt][Ii][Oo][Nn]$'

    FindingChart:
      description: Finding chart description goes here

    InstrumentEnum:
      type: string
      oneOf:
        - pattern: '^[Kk][Cc][Ww][Ii]$'
        - pattern: '^[Dd][Ee][Ii][Mm][Oo][Ss]'
        - pattern: '^[Ee][Ss][Ii]$'
        - pattern: '^[Hh][Ii][Rr][Ee][Ss]$'
        - pattern: '^[Ll][Rr][Ii][Ss]$'
        - pattern: '^[Mm][Oo][Ss][Ff][Ii][Rr][Ee]$'
        - pattern: '^[Nn][Ii][Re][Ss]$'
        - pattern: '^[Nn][Ii][Re][Cc]2$'
        - enum:
          - DE
          - DF
          - EI
          - HI
          - KB
          - KF
          - LB
          - LR
          - MF
          - OI
          - OS
          - NR
          - NI
          - NS
          - N2
          - NC
    RASchema:
      type: string
      oneOf:
        - pattern: '^\d{2}:\d{2}:\d{2}$'
        - pattern: '^\d{2}:\d{2}:\d{2}.\d{1}$'
        - pattern: '^\d{2}:\d{2}:\d{2}.\d{2}$'
      example: "12:32:14.4"

    DecSchema:
      type: string
      oneOf:
        - pattern: '^\d{2}:\d{2}:\d{2}$'
        - pattern: '^\d{2}:\d{2}:\d{2}.\d{1}$'
        - pattern: '^\d{2}:\d{2}:\d{2}.\d{2}$'
        - pattern: '^-\d{2}:\d{2}:\d{2}$'
        - pattern: '^-\d{2}:\d{2}:\d{2}.\d{1}$'
        - pattern: '^-\d{2}:\d{2}:\d{2}.\d{2}$'
        - pattern: '^\+\d{2}:\d{2}:\d{2}$'
        - pattern: '^\+\d{2}:\d{2}:\d{2}.\d{1}$'
        - pattern: '^\+\d{2}:\d{2}:\d{2}.\d{2}$'
      example: "19:32:28.4"

    DitherSchema:
      required:
        - ra_offset
        - dec_offset
        - position
        - guided
      type: object
      properties:
        ra_offset:
          type: number
        dec_offset:
          type: number
        position:
          type: string
          enum:
            - T
            - S
            - O
        guided:
          type: boolean

    SemIdSchema:
      type: string
      pattern: '^\d{4}[AB]_[A-Z]\d{3}$'
      example: "2021A_U123"

    TemplateSchema:
      anyOf:
          - $ref: '#/components/schemas/ScienceTemplate'
          - $ref: '#/components/schemas/CalEngTemplate'

    DateSchema:
      type: string
      pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
      example: "2021-04-22 13:22:36"

    VersionSchema:
      type: string
      pattern: '^\d+\.'
      example: '0.0.1'

